{"version":3,"file":"component---src-pages-account-index-tsx-d3a24ba57f6ccad866e0.js","mappings":"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","sources":["webpack://@metamask/snaps-directory/./src/pages/404.tsx","webpack://@metamask/snaps-directory/./node_modules/@chakra-ui/progress/dist/chunk-7CG3L4JY.mjs","webpack://@metamask/snaps-directory/./node_modules/@chakra-ui/progress/dist/chunk-TXZFUZNG.mjs","webpack://@metamask/snaps-directory/./node_modules/@chakra-ui/progress/dist/chunk-EMKK5VRD.mjs","webpack://@metamask/snaps-directory/./node_modules/@chakra-ui/progress/dist/chunk-Q6Q7I7E5.mjs","webpack://@metamask/snaps-directory/./src/features/account/components/modals/AddToUserCircleModal.tsx","webpack://@metamask/snaps-directory/./src/features/account/components/modals/AccountReportModal.tsx","webpack://@metamask/snaps-directory/./src/features/account/components/modals/TEEndorsementModal.tsx","webpack://@metamask/snaps-directory/./src/features/account/components/AccountInfo.tsx","webpack://@metamask/snaps-directory/./src/features/account/AccountReport.tsx","webpack://@metamask/snaps-directory/./src/features/account/AccountTEEndorsement.tsx","webpack://@metamask/snaps-directory/./src/features/account/MoreOptionMenu.tsx","webpack://@metamask/snaps-directory/./src/pages/account/index.tsx","webpack://@metamask/snaps-directory/./src/assets/images/seo/home.png"],"sourcesContent":["import { Container, Heading, Button } from '@chakra-ui/react';\nimport { Trans } from '@lingui/macro';\nimport { graphql, Link, withPrefix } from 'gatsby';\nimport type { FunctionComponent } from 'react';\n\nimport banner from '../assets/images/seo/home.png';\nimport { Fox } from '../components';\nimport type { Fields } from '../utils';\n\nconst NotFoundPage: FunctionComponent = () => (\n  <Container\n    display=\"flex\"\n    flexDirection=\"column\"\n    marginY=\"12\"\n    alignItems=\"center\"\n    textAlign=\"center\"\n    maxWidth=\"container.md\"\n  >\n    <Fox />\n    <Heading\n      as=\"h1\"\n      fontSize={['2xl', '4xl', '5xl']}\n      marginY=\"6\"\n      lineHeight=\"116%\"\n    >\n      <Trans>The page you&apos;re looking for can&apos;t be found.</Trans>\n    </Heading>\n    <Link to=\"/\">\n      <Button variant=\"primary\">\n        <Trans>Go home</Trans>\n      </Button>\n    </Link>\n  </Container>\n);\n\ntype HeadProps = {\n  data: {\n    site: {\n      siteMetadata: Fields<\n        Queries.SiteSiteMetadata,\n        'title' | 'description' | 'author' | 'siteUrl'\n      >;\n    };\n  };\n};\n\nexport const Head: FunctionComponent<HeadProps> = ({ data }) => {\n  const title = `Page not found - ${data.site.siteMetadata.title}`;\n  const image = `${data.site.siteMetadata.siteUrl}${withPrefix(banner)}`;\n\n  return (\n    <>\n      <html lang=\"en\" />\n      <title>{title}</title>\n      <meta name=\"description\" content={data.site.siteMetadata.description} />\n      <meta property=\"og:title\" content=\"Page not found\" />\n      <meta property=\"og:site_name\" content={data.site.siteMetadata.title} />\n      <meta\n        property=\"og:description\"\n        content={data.site.siteMetadata.description}\n      />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"og:image\" content={image} />\n      <meta name=\"og:image:width\" content=\"1200\" />\n      <meta name=\"og:image:height\" content=\"630\" />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:creator\" content={data.site.siteMetadata.author} />\n      <meta name=\"twitter:title\" content={title} />\n      <meta\n        name=\"twitter:description\"\n        content={data.site.siteMetadata.description}\n      />\n      <meta name=\"twitter:image\" content={image} />\n    </>\n  );\n};\n\nexport const query = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n        siteUrl\n      }\n    }\n  }\n`;\n\nexport default NotFoundPage;\n","'use client'\n\n// src/circle.tsx\nimport { chakra } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Circle = (props) => /* @__PURE__ */ jsx(chakra.circle, { cx: 50, cy: 50, r: 42, fill: \"transparent\", ...props });\nCircle.displayName = \"Circle\";\n\nexport {\n  Circle\n};\n//# sourceMappingURL=chunk-7CG3L4JY.mjs.map","'use client'\n\n// src/progress.utils.tsx\nimport { keyframes } from \"@chakra-ui/system\";\nfunction valueToPercent(value, min, max) {\n  return (value - min) * 100 / (max - min);\n}\nvar spin = keyframes({\n  \"0%\": {\n    strokeDasharray: \"1, 400\",\n    strokeDashoffset: \"0\"\n  },\n  \"50%\": {\n    strokeDasharray: \"400, 400\",\n    strokeDashoffset: \"-100\"\n  },\n  \"100%\": {\n    strokeDasharray: \"400, 400\",\n    strokeDashoffset: \"-260\"\n  }\n});\nvar rotate = keyframes({\n  \"0%\": {\n    transform: \"rotate(0deg)\"\n  },\n  \"100%\": {\n    transform: \"rotate(360deg)\"\n  }\n});\nvar progress = keyframes({\n  \"0%\": { left: \"-40%\" },\n  \"100%\": { left: \"100%\" }\n});\nvar stripe = keyframes({\n  from: { backgroundPosition: \"1rem 0\" },\n  to: { backgroundPosition: \"0 0\" }\n});\nfunction getProgressProps(options) {\n  const {\n    value = 0,\n    min,\n    max,\n    valueText,\n    getValueText,\n    isIndeterminate,\n    role = \"progressbar\"\n  } = options;\n  const percent = valueToPercent(value, min, max);\n  const getAriaValueText = () => {\n    if (value == null)\n      return void 0;\n    return typeof getValueText === \"function\" ? getValueText(value, percent) : valueText;\n  };\n  return {\n    bind: {\n      \"data-indeterminate\": isIndeterminate ? \"\" : void 0,\n      \"aria-valuemax\": max,\n      \"aria-valuemin\": min,\n      \"aria-valuenow\": isIndeterminate ? void 0 : value,\n      \"aria-valuetext\": getAriaValueText(),\n      role\n    },\n    percent,\n    value\n  };\n}\n\nexport {\n  spin,\n  rotate,\n  progress,\n  stripe,\n  getProgressProps\n};\n//# sourceMappingURL=chunk-TXZFUZNG.mjs.map","'use client'\nimport {\n  rotate\n} from \"./chunk-TXZFUZNG.mjs\";\n\n// src/shape.tsx\nimport { chakra } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Shape = (props) => {\n  const { size, isIndeterminate, ...rest } = props;\n  return /* @__PURE__ */ jsx(\n    chakra.svg,\n    {\n      viewBox: \"0 0 100 100\",\n      __css: {\n        width: size,\n        height: size,\n        animation: isIndeterminate ? `${rotate} 2s linear infinite` : void 0\n      },\n      ...rest\n    }\n  );\n};\nShape.displayName = \"Shape\";\n\nexport {\n  Shape\n};\n//# sourceMappingURL=chunk-EMKK5VRD.mjs.map","'use client'\nimport {\n  Circle\n} from \"./chunk-7CG3L4JY.mjs\";\nimport {\n  Shape\n} from \"./chunk-EMKK5VRD.mjs\";\nimport {\n  getProgressProps,\n  spin\n} from \"./chunk-TXZFUZNG.mjs\";\n\n// src/circular-progress.tsx\nimport {\n  chakra,\n  forwardRef\n} from \"@chakra-ui/system\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar CircularProgress = forwardRef(\n  (props, ref) => {\n    var _a;\n    const {\n      size = \"48px\",\n      max = 100,\n      min = 0,\n      valueText,\n      getValueText,\n      value,\n      capIsRound,\n      children,\n      thickness = \"10px\",\n      color = \"#0078d4\",\n      trackColor = \"#edebe9\",\n      isIndeterminate,\n      ...rest\n    } = props;\n    const progress = getProgressProps({\n      min,\n      max,\n      value,\n      valueText,\n      getValueText,\n      isIndeterminate\n    });\n    const determinant = isIndeterminate ? void 0 : ((_a = progress.percent) != null ? _a : 0) * 2.64;\n    const strokeDasharray = determinant == null ? void 0 : `${determinant} ${264 - determinant}`;\n    const indicatorProps = isIndeterminate ? {\n      css: { animation: `${spin} 1.5s linear infinite` }\n    } : {\n      strokeDashoffset: 66,\n      strokeDasharray,\n      transitionProperty: \"stroke-dasharray, stroke\",\n      transitionDuration: \"0.6s\",\n      transitionTimingFunction: \"ease\"\n    };\n    const rootStyles = {\n      display: \"inline-block\",\n      position: \"relative\",\n      verticalAlign: \"middle\",\n      fontSize: size\n    };\n    return /* @__PURE__ */ jsxs(\n      chakra.div,\n      {\n        ref,\n        className: \"chakra-progress\",\n        ...progress.bind,\n        ...rest,\n        __css: rootStyles,\n        children: [\n          /* @__PURE__ */ jsxs(Shape, { size, isIndeterminate, children: [\n            /* @__PURE__ */ jsx(\n              Circle,\n              {\n                stroke: trackColor,\n                strokeWidth: thickness,\n                className: \"chakra-progress__track\"\n              }\n            ),\n            /* @__PURE__ */ jsx(\n              Circle,\n              {\n                stroke: color,\n                strokeWidth: thickness,\n                className: \"chakra-progress__indicator\",\n                strokeLinecap: capIsRound ? \"round\" : void 0,\n                opacity: progress.value === 0 && !isIndeterminate ? 0 : void 0,\n                ...indicatorProps\n              }\n            )\n          ] }),\n          children\n        ]\n      }\n    );\n  }\n);\nCircularProgress.displayName = \"CircularProgress\";\n\nexport {\n  CircularProgress\n};\n//# sourceMappingURL=chunk-Q6Q7I7E5.mjs.map","import { Center, Link, Text, VStack } from '@chakra-ui/react';\nimport { Trans, t } from '@lingui/macro';\nimport type { FunctionComponent } from 'react';\nimport { useCallback, useMemo, useState } from 'react';\nimport { isAddress } from 'viem';\n\nimport { AvatarBlueIcon, RequestSignModal } from '../../../../components';\nimport {\n  useDispatch,\n  useSelector,\n  useVerifiableCredential,\n} from '../../../../hooks';\nimport { useSignErrorHandler } from '../../../../hooks/useSignErrorHandler';\nimport useToastMsg from '../../../../hooks/useToastMsg';\nimport type { ApplicationState } from '../../../../store';\nimport { trimAddress } from '../../../../utils';\nimport { addUserToUserCircle, setAddToUserModalOpen } from '../../store';\n\ntype AddToUserCircleModalProps = {\n  subjectAddress: string;\n};\n\nexport const AddToUserCircleModal: FunctionComponent<\n  AddToUserCircleModalProps\n> = ({ subjectAddress }) => {\n  const { addToUserModalOpen } = useSelector(\n    (state: ApplicationState) => state.accountProfile,\n  );\n  const dispatch = useDispatch();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const { issuerAddress, signMessage, signError, accountVCBuilder } =\n    useVerifiableCredential();\n\n  useSignErrorHandler(signError);\n\n  const { showSuccessMsg } = useToastMsg();\n\n  const shortSubAddress = useMemo(\n    () => trimAddress(subjectAddress),\n    [subjectAddress],\n  );\n\n  const onSignButtonClick = useCallback(() => {\n    if (!issuerAddress) {\n      return;\n    }\n    if (!isAddress(subjectAddress)) {\n      return;\n    }\n    setIsLoading(true);\n\n    const VC = accountVCBuilder.buildAccountTrust(\n      issuerAddress,\n      subjectAddress,\n    );\n\n    signMessage(VC)\n      .then((signature) => {\n        if (signature) {\n          showSuccessMsg({\n            title: t`Added to your trust circle`,\n            description: t`${shortSubAddress} has been added to your trust circle`,\n          });\n\n          dispatch(addUserToUserCircle(subjectAddress));\n          dispatch(setAddToUserModalOpen(false));\n        }\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [issuerAddress, subjectAddress]);\n\n  return (\n    <RequestSignModal\n      isOpen={addToUserModalOpen}\n      mode=\"positive\"\n      onClose={() => dispatch(setAddToUserModalOpen(false))}\n      headerIcon={<AvatarBlueIcon />}\n      buttonText={t`Sign to add`}\n      isLoading={isLoading}\n      onSignButtonClick={onSignButtonClick}\n    >\n      <Center>\n        <VStack textAlign=\"center\">\n          <Text fontSize=\"md\" fontWeight=\"bold\">\n            <Trans>\n              Add{' '}\n              <Text variant=\"blue\" as=\"span\">\n                {shortSubAddress}\n              </Text>{' '}\n              to your trust circle\n            </Trans>\n          </Text>\n\n          <Text fontSize=\"sm\" noOfLines={2}>\n            Lorem ipsum dolor description of what it means to add a user to your\n            trust circle.{' '}\n            <Link>\n              <Trans>Learn more</Trans>\n            </Link>\n          </Text>\n        </VStack>\n      </Center>\n    </RequestSignModal>\n  );\n};\n","import { Center, Link, Text, VStack } from '@chakra-ui/react';\nimport { Trans, t } from '@lingui/macro';\nimport { useState, type FunctionComponent } from 'react';\n\nimport {\n  MultipleCheckboxOptions,\n  QuestionRedIcon,\n  RequestSignModal,\n} from '../../../../components';\n\nexport type AccountReportModalProps = {\n  reportEntity: string;\n  options: string[];\n  onSign: (arg: string[]) => Promise<void>;\n  onClose: () => void;\n  visibility: boolean;\n};\n\nexport const AccountReportModal: FunctionComponent<AccountReportModalProps> = ({\n  reportEntity,\n  options,\n  onSign,\n  onClose,\n  visibility,\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedOptions, setSelectedOptions] = useState([] as string[]);\n\n  const onSignButtonClick = () => {\n    setIsLoading(true);\n\n    onSign(selectedOptions).finally(() => {\n      setIsLoading(false);\n    });\n  };\n\n  return (\n    <RequestSignModal\n      isOpen={visibility}\n      isLoading={isLoading}\n      mode=\"negative\"\n      headerIcon={<QuestionRedIcon />}\n      buttonText={t`Sign to report`}\n      onClose={onClose}\n      onSignButtonClick={onSignButtonClick}\n    >\n      <Center>\n        <VStack textAlign=\"center\" fontSize=\"md\">\n          <Text fontWeight=\"medium\">\n            <Trans>\n              Report for{' '}\n              <Text variant=\"blue\" as=\"span\">\n                {reportEntity}\n              </Text>{' '}\n              as a malicious actor\n            </Trans>\n          </Text>\n\n          <Text noOfLines={2} as=\"span\">\n            <Trans>\n              This action will flag the user as a malicious in your community.\n            </Trans>{' '}\n            <Link>\n              <Trans>Learn more</Trans>\n            </Link>\n          </Text>\n          <MultipleCheckboxOptions\n            options={options}\n            onChange={(values) => {\n              setSelectedOptions(\n                options.filter((_, index) => values[index] === true),\n              );\n            }}\n          />\n        </VStack>\n      </Center>\n    </RequestSignModal>\n  );\n};\n","import { Center, Text, VStack, Checkbox, Box } from '@chakra-ui/react';\nimport { Trans, t } from '@lingui/macro';\nimport { useState, type FunctionComponent } from 'react';\n\nimport { AvatarBlueIcon, RequestSignModal } from '../../../../components';\n\nexport type TEEndorsementModalProps = {\n  trustEntity: string;\n  options: TEEndorsementOption[];\n  onSign: (arg: string[]) => Promise<void>;\n  onClose: () => void;\n  visibility: boolean;\n};\n\nexport type TEEndorsementOption = {\n  label: string;\n  value: string;\n  description?: string;\n};\n\nexport const TEEndorsementModal: FunctionComponent<TEEndorsementModalProps> = ({\n  trustEntity,\n  options,\n  onSign,\n  onClose,\n  visibility,\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [checkedItems, setCheckedItems] = useState(options.map(() => false));\n\n  const handleCheckboxChange = (checked: boolean, index: number) => {\n    checkedItems[index] = checked;\n    setCheckedItems([...checkedItems]);\n  };\n\n  const onSignButtonClick = () => {\n    setIsLoading(true);\n\n    const args: string[] = [];\n    checkedItems.forEach((state: boolean, index: number) => {\n      if (state) {\n        args.push(options[index]?.value as string);\n      }\n    });\n\n    onSign(args).finally(() => {\n      setIsLoading(false);\n    });\n  };\n\n  return (\n    <RequestSignModal\n      isOpen={visibility}\n      isLoading={isLoading}\n      mode=\"positive\"\n      headerIcon={<AvatarBlueIcon />}\n      buttonText={t`Sign`}\n      onClose={onClose}\n      onSignButtonClick={onSignButtonClick}\n    >\n      <Center>\n        <VStack fontSize=\"md\">\n          <Text fontWeight=\"medium\" textAlign=\"center\">\n            <Trans>Trusted technical abilities</Trans>\n          </Text>\n          <Text textAlign=\"center\">\n            <Trans>\n              Your level of confidence in{' '}\n              <Text variant=\"blue\" as=\"span\">\n                {trustEntity}\n              </Text>{' '}\n              skill set\n            </Trans>\n          </Text>\n          {options.map((option: TEEndorsementOption, index: number) => (\n            <Box\n              background=\"background.default\"\n              padding=\"1rem\"\n              borderRadius=\"1rem\"\n              width=\"100%\"\n              mt=\"1rem\"\n              key={index}\n            >\n              <>\n                <Checkbox\n                  size=\"md\"\n                  borderRadius=\"0.25rem\"\n                  padding=\"0.012rem\"\n                  marginInline=\"1\"\n                  value={option.value}\n                  onChange={(event) =>\n                    handleCheckboxChange(event.target.checked, index)\n                  }\n                >\n                  <Text>{option.label}</Text>\n                </Checkbox>\n                {option.description && (\n                  <Text fontSize=\"xs\">{option.description}</Text>\n                )}\n              </>\n            </Box>\n          ))}\n        </VStack>\n      </Center>\n    </RequestSignModal>\n  );\n};\n","import { CircularProgress, Heading, HStack, VStack } from '@chakra-ui/react';\nimport type { Hex } from '@metamask/utils';\nimport { mainnet } from '@wagmi/core/chains';\nimport type { FunctionComponent } from 'react';\nimport { useAccount, useEnsName } from 'wagmi';\n\nimport { AccountRoleTags } from './AccountRoleTags';\nimport { AddToUserCircleModal } from './modals';\nimport { MoreOptionMenu } from '..';\nimport { JazzIcon } from '../../../components';\nimport { useSelector, useVerifiableCredential } from '../../../hooks';\nimport { trimAddress } from '../../../utils';\nimport { getAccountTrustScoreForAccountId } from '../trust-score/store';\n\nexport type AccountInfoProps = {\n  address: Hex;\n};\n\nexport const AccountInfo: FunctionComponent<AccountInfoProps> = ({\n  address,\n}) => {\n  const { data, isLoading } = useEnsName({\n    address,\n    chainId: mainnet.id,\n  });\n  const { isConnected } = useAccount();\n\n  const { accountVCBuilder } = useVerifiableCredential();\n\n  const accountId = accountVCBuilder.getSubjectDid(address);\n\n  const trustScores = useSelector(getAccountTrustScoreForAccountId(accountId));\n\n  return (\n    <VStack spacing=\"8\" data-testid=\"account-info\">\n      <JazzIcon address={address} size={130} />\n      {trustScores.length > 0 && <AccountRoleTags trustScores={trustScores} />}\n      <HStack>\n        <Heading\n          as=\"h3\"\n          fontSize=\"3xl\"\n          color=\"text.alternative\"\n          textAlign=\"center\"\n        >\n          {isLoading ? (\n            <CircularProgress value={80} data-testid=\"account-info-loading\" />\n          ) : (\n            data ?? trimAddress(address)\n          )}\n        </Heading>\n        {isConnected && (\n          <>\n            <MoreOptionMenu subjectAddress={address} />\n            <AddToUserCircleModal subjectAddress={address} />\n          </>\n        )}\n      </HStack>\n    </VStack>\n  );\n};\n","import { t } from '@lingui/macro';\nimport type { Hex } from '@metamask/utils';\nimport { mainnet } from '@wagmi/core/chains';\nimport { type FunctionComponent, useEffect, useMemo, useState } from 'react';\nimport { useEnsName } from 'wagmi';\n\nimport {\n  createAccountAssertion,\n  fetchAccountAssertionsForAccountId,\n} from './assertions/api';\nimport {\n  getCurrentTrustworthinessLevelForIssuer,\n  isAccountReportedByIssuer,\n} from './assertions/store';\nimport { AccountReportModal } from './components';\nimport { ReportButton } from '../../components';\nimport { useDispatch, useSelector, useVerifiableCredential } from '../../hooks';\nimport { useSignErrorHandler } from '../../hooks/useSignErrorHandler';\nimport useToastMsg from '../../hooks/useToastMsg';\nimport { trimAddress } from '../../utils';\n\ntype AccountReportProps = {\n  address: Hex;\n  connectedAddress: Hex;\n};\n\nexport const AccountReport: FunctionComponent<AccountReportProps> = ({\n  address,\n  connectedAddress,\n}) => {\n  const { data } = useEnsName({\n    address,\n    chainId: mainnet.id,\n  });\n\n  const { signMessage, signError, accountVCBuilder } =\n    useVerifiableCredential();\n\n  const trimmedAddress = useMemo(() => trimAddress(address), [address]);\n\n  const pkhAddress = accountVCBuilder.getSubjectDid(address);\n  const issuer = accountVCBuilder.getSubjectDid(connectedAddress);\n\n  const latestTrustworthinessLevel = useSelector(\n    getCurrentTrustworthinessLevelForIssuer(pkhAddress, issuer),\n  );\n\n  const isAccountReported = useSelector(\n    isAccountReportedByIssuer(pkhAddress, issuer),\n  );\n\n  const reportEntity = data ?? trimmedAddress;\n\n  const [showModal, setShowModal] = useState(false);\n  const [reported, setEndorsed] = useState(isAccountReported);\n\n  useEffect(() => {\n    setEndorsed(isAccountReported);\n  }, [isAccountReported]);\n\n  const dispatch = useDispatch();\n\n  const { showSuccessMsg, showErrorMsg } = useToastMsg();\n\n  useSignErrorHandler(signError);\n\n  // TODO: hardcode options for now, change to dynamic if needed\n  const options = [\n    t`Scamming`,\n    t`Hacking`,\n    t`Harassment`,\n    t`Disinformation`,\n    t`Other`,\n  ];\n\n  const onSign = async (selected: string[]) => {\n    const VC = accountVCBuilder.buildReportAccountTrust(\n      connectedAddress,\n      address,\n      selected,\n    );\n\n    const signature = await signMessage(VC);\n\n    if (signature) {\n      const assertion = accountVCBuilder.getSignedAssertion(VC, signature);\n      dispatch(createAccountAssertion(assertion))\n        .then((action) => {\n          if (action.type.endsWith('fulfilled')) {\n            dispatch(fetchAccountAssertionsForAccountId(pkhAddress)).catch(\n              (error) => console.log(error),\n            );\n            setEndorsed(true);\n            showSuccessMsg({\n              title: t`Success`,\n              description: t`${pkhAddress} has been reported.`,\n            });\n          } else {\n            showErrorMsg({\n              title: t`Error`,\n              description: t`Failed to create report for ${pkhAddress}.`,\n            });\n          }\n        })\n        .catch(() => {\n          showErrorMsg({\n            title: t`Error`,\n            description: t`Failed to create report for ${pkhAddress}.`,\n          });\n        });\n    }\n    setShowModal(false);\n  };\n\n  return (\n    <>\n      <ReportButton\n        onClick={() => setShowModal(true)}\n        reported={reported}\n        isDisabled={\n          reported ||\n          (latestTrustworthinessLevel !== undefined &&\n            latestTrustworthinessLevel < 0)\n        }\n      />\n      {showModal && (\n        <AccountReportModal\n          reportEntity={reportEntity}\n          visibility={showModal}\n          onClose={() => setShowModal(false)}\n          options={options}\n          onSign={onSign}\n        />\n      )}\n    </>\n  );\n};\n","import { t } from '@lingui/macro';\nimport type { Hex } from '@metamask/utils';\nimport { mainnet } from '@wagmi/core/chains';\nimport { useMemo, useState, type FunctionComponent, useEffect } from 'react';\nimport { useEnsName } from 'wagmi';\n\nimport {\n  createAccountAssertion,\n  fetchAccountAssertionsForAccountId,\n} from './assertions/api';\nimport {\n  getCurrentTrustworthinessLevelForIssuer,\n  isAccountEndorsedByIssuer,\n} from './assertions/store';\nimport { TEEndorsementModal } from './components';\nimport { EndorseButton } from '../../components';\nimport { useDispatch, useSelector } from '../../hooks';\nimport { useSignErrorHandler } from '../../hooks/useSignErrorHandler';\nimport useToastMsg from '../../hooks/useToastMsg';\nimport { useVerifiableCredential } from '../../hooks/useVerifiableCredential';\nimport {\n  trimAddress,\n  TrustworthinessScope,\n  type Trustworthiness,\n} from '../../utils';\n\ntype AccountTEEndorsementProps = {\n  address: Hex;\n  connectedAddress: Hex;\n};\n\nexport const AccountTEEndorsement: FunctionComponent<\n  AccountTEEndorsementProps\n> = ({ address, connectedAddress }) => {\n  const { data } = useEnsName({\n    address,\n    chainId: mainnet.id,\n  });\n\n  const { signMessage, signError, accountVCBuilder } =\n    useVerifiableCredential();\n\n  const trimedAddress = useMemo(() => trimAddress(address), [address]);\n\n  const pkhAddress = accountVCBuilder.getSubjectDid(address);\n  const issuer = accountVCBuilder.getSubjectDid(connectedAddress);\n\n  const latestTrustworthinessLevel = useSelector(\n    getCurrentTrustworthinessLevelForIssuer(pkhAddress, issuer),\n  );\n\n  const isAccountEndorsed = useSelector(\n    isAccountEndorsedByIssuer(pkhAddress, issuer),\n  );\n\n  const trustEntity = data ?? trimedAddress;\n\n  const [showModal, setShowModal] = useState(false);\n  const [endorsed, setEndorsed] = useState(isAccountEndorsed);\n\n  useEffect(() => {\n    setEndorsed(isAccountEndorsed);\n  }, [isAccountEndorsed]);\n\n  const dispatch = useDispatch();\n\n  const { showSuccessMsg, showErrorMsg } = useToastMsg();\n\n  useSignErrorHandler(signError);\n\n  const options = [\n    {\n      label: t`Software Development`,\n      description: t`Ability to develop MetaMask Snaps`,\n      value: TrustworthinessScope.SoftwareDevelopment,\n    },\n    {\n      label: t`Software Security`,\n      description: t`Ability to develop secure applications`,\n      value: TrustworthinessScope.SoftwareSecurity,\n    },\n  ];\n\n  const fillOptions = (selected: string[]): Trustworthiness[] => {\n    const selectedOptions = new Set<string>(selected);\n\n    return options.map((option) => ({\n      scope: option.value,\n      level: selectedOptions.has(option.value) ? 1 : 0,\n    }));\n  };\n\n  const onSign = async (selected: string[]) => {\n    const VC = accountVCBuilder.buildTechnicalExpertiseTrust(\n      connectedAddress,\n      address,\n      fillOptions(selected),\n    );\n\n    const signature = await signMessage(VC);\n\n    if (signature) {\n      const assertion = accountVCBuilder.getSignedAssertion(VC, signature);\n      dispatch(createAccountAssertion(assertion))\n        .then((action) => {\n          if (action.type.endsWith('fulfilled')) {\n            dispatch(fetchAccountAssertionsForAccountId(pkhAddress)).catch(\n              (error) => console.log(error),\n            );\n            setEndorsed(true);\n            showSuccessMsg({\n              title: t`Success`,\n              description: t`${pkhAddress} has been endorsed.`,\n            });\n          } else {\n            showErrorMsg({\n              title: t`Error`,\n              description: t`Failed to create endorsement for ${pkhAddress}.`,\n            });\n          }\n        })\n        .catch(() => {\n          showErrorMsg({\n            title: t`Error`,\n            description: t`Failed to create endorsement for ${pkhAddress}.`,\n          });\n        });\n    }\n    setShowModal(false);\n  };\n\n  return (\n    <>\n      <EndorseButton\n        onClick={() => setShowModal(true)}\n        endorsed={endorsed}\n        isDisabled={endorsed || latestTrustworthinessLevel !== undefined}\n      />\n      {showModal && (\n        <TEEndorsementModal\n          trustEntity={trustEntity}\n          visibility={showModal}\n          onClose={() => setShowModal(false)}\n          options={options}\n          onSign={onSign}\n        />\n      )}\n    </>\n  );\n};\n","import { t } from '@lingui/macro';\nimport { useCallback, useMemo, type FunctionComponent } from 'react';\nimport { useAccount, useNetwork } from 'wagmi';\n\nimport { setAddToUserModalOpen } from './store';\nimport {\n  ExportOutlineIcon,\n  IconMenu,\n  MenuItemCard,\n  MoreOptionIcon,\n  ShareIcon,\n  UserCircleAddIcon,\n} from '../../components';\nimport { useDispatch, useSelector } from '../../hooks';\nimport useToastMsg from '../../hooks/useToastMsg';\nimport type { ApplicationState } from '../../store';\n\ntype MoreOptionMenuProps = {\n  subjectAddress: string;\n};\n\nexport const MoreOptionMenu: FunctionComponent<MoreOptionMenuProps> = ({\n  subjectAddress,\n}) => {\n  const { userAccount } = useSelector(\n    (state: ApplicationState) => state.accountProfile,\n  );\n  const dispatch = useDispatch();\n\n  const { chain } = useNetwork();\n  const { address } = useAccount();\n  const { showSuccessMsg, showErrorMsg } = useToastMsg();\n\n  // Dont know why when we write following as async method, the typescript will have error complaining about the return type Promise<Void>\n  const copyToClipboard = useCallback(() => {\n    navigator.clipboard\n      .writeText(`${window.location.origin}/account/?address=${subjectAddress}`)\n      .then(() => {\n        showSuccessMsg({\n          title: t`Copied`,\n          description: t`Profile link copied to clipboard`,\n        });\n      })\n      .catch(() => {\n        showErrorMsg({\n          title: t`Error`,\n          description: t`Failed to copy profile link to clipboard`,\n        });\n      });\n  }, [subjectAddress, showErrorMsg, showSuccessMsg]);\n\n  const openBlockExplorer = useCallback(() => {\n    window.open(`${chain?.blockExplorers?.etherscan?.url}/address/${address}`);\n  }, [chain, address]);\n\n  const shouldShowAddModal = useMemo(() => {\n    if (address === subjectAddress) {\n      return false;\n    }\n\n    if (userAccount.userCircle.includes(subjectAddress)) {\n      return false;\n    }\n\n    return true;\n  }, [address, subjectAddress, userAccount]);\n\n  return (\n    <IconMenu icon={<MoreOptionIcon />}>\n      {shouldShowAddModal && (\n        <MenuItemCard\n          icon={<UserCircleAddIcon />}\n          label={t`Add to my circle`}\n          testId=\"add-to-circle\"\n          onClick={() => dispatch(setAddToUserModalOpen(true))}\n        />\n      )}\n      <MenuItemCard\n        icon={<ShareIcon />}\n        label={t`Copy profile link`}\n        testId=\"copy-profile-link\"\n        onClick={() => {\n          copyToClipboard();\n        }}\n      />\n      <MenuItemCard\n        icon={<ExportOutlineIcon />}\n        label={t`Etherscan`}\n        testId=\"etherscan\"\n        onClick={() => openBlockExplorer()}\n      />\n    </IconMenu>\n  );\n};\n","import { Container, VStack, Box, HStack } from '@chakra-ui/react';\nimport { t } from '@lingui/macro';\nimport type { Hex } from '@metamask/utils';\nimport { graphql, withPrefix } from 'gatsby';\nimport { useEffect, type FunctionComponent } from 'react';\nimport { useAccount } from 'wagmi';\n\nimport banner from '../../assets/images/seo/home.png';\nimport {\n  AccountInfo,\n  AccountReport,\n  AccountTEEndorsement,\n} from '../../features/account';\nimport { fetchAccountAssertionsForAccountId } from '../../features/account/assertions/api';\nimport { fetchTrustScoreForAccountId } from '../../features/account/trust-score/api';\nimport { useDispatch, useVerifiableCredential } from '../../hooks';\nimport { type Fields, parseAddress } from '../../utils';\nimport NotFound from '../404';\n\ntype AccountPageProps = {\n  location: {\n    search: Record<string, string> | URLSearchParams | undefined;\n  };\n};\n\nconst AccountPage: FunctionComponent<AccountPageProps> = ({ location }) => {\n  const { address: connectedAddress, isConnected } = useAccount();\n  const params = new URLSearchParams(location.search);\n  const address = parseAddress(params.get('address') as Hex);\n  const { accountVCBuilder } = useVerifiableCredential();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (address) {\n      const issuer = accountVCBuilder.getIssuerDid(address);\n      dispatch(fetchAccountAssertionsForAccountId(issuer)).catch((error) =>\n        console.log(error),\n      );\n      dispatch(fetchTrustScoreForAccountId(issuer)).catch((error) =>\n        console.log(error),\n      );\n    }\n  }, [dispatch, accountVCBuilder, address]);\n\n  const isMyAccount = address === connectedAddress;\n  if (!address) {\n    return <NotFound />;\n  }\n\n  return (\n    <Box position=\"relative\" data-testid=\"account-info\" mt=\"4rem\">\n      <Container maxWidth=\"container.xl\" paddingTop=\"0\" position=\"relative\">\n        <VStack spacing=\"8\">\n          <AccountInfo address={address} />\n          <HStack>\n            {isConnected && !isMyAccount && (\n              <>\n                <AccountReport\n                  address={address}\n                  connectedAddress={connectedAddress as Hex}\n                />\n                <AccountTEEndorsement\n                  address={address}\n                  connectedAddress={connectedAddress as Hex}\n                />\n              </>\n            )}\n          </HStack>\n        </VStack>\n      </Container>\n    </Box>\n  );\n};\n\ntype HeadProps = {\n  data: {\n    site: {\n      siteMetadata: Fields<\n        Queries.SiteSiteMetadata,\n        'title' | 'description' | 'author' | 'siteUrl'\n      >;\n    };\n  };\n};\n\nexport const Head: FunctionComponent<HeadProps> = ({ data }) => {\n  const name = t`Account Profile`;\n  const title = t`MetaMask Snaps Directory - Account Profile`;\n  const description = t`Discover the MetaMask Snaps Directory Account Profile page.`;\n\n  const image = `${data.site.siteMetadata.siteUrl}${withPrefix(banner)}`;\n\n  return (\n    <>\n      <html lang=\"en\" />\n      <title>{title}</title>\n      <meta name=\"description\" content={description} />\n      <meta property=\"og:title\" content={name} />\n      <meta property=\"og:site_name\" content={data.site.siteMetadata.title} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"og:image\" content={image} />\n      <meta name=\"og:image:width\" content=\"1200\" />\n      <meta name=\"og:image:height\" content=\"630\" />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:creator\" content={data.site.siteMetadata.author} />\n      <meta name=\"twitter:title\" content={name} />\n      <meta name=\"twitter:description\" content={description} />\n      <meta name=\"twitter:image\" content={image} />\n    </>\n  );\n};\n\nexport const query = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n        siteUrl\n      }\n    }\n  }\n`;\n\nexport default AccountPage;\n","export default __webpack_public_path__ + \"static/home-3da7273f125d0f7c0add3b849d33e152.png\";"],"names":["Head","_ref","data","title","site","siteMetadata","image","siteUrl","withPrefix","banner","_jsxs","_Fragment","children","_jsx","lang","name","content","description","property","author","NotFoundPage","Container","display","flexDirection","marginY","alignItems","textAlign","maxWidth","Fox","Heading","as","fontSize","lineHeight","Trans","id","Link","to","Button","variant","Circle","props","jsx","circle","cx","cy","r","fill","displayName","spin","strokeDasharray","strokeDashoffset","rotate","transform","left","from","backgroundPosition","Shape","size","isIndeterminate","rest","svg","viewBox","__css","width","height","animation","CircularProgress","ref","_a","max","min","valueText","getValueText","value","capIsRound","thickness","color","trackColor","progress","options","role","percent","valueToPercent","bind","getAriaValueText","getProgressProps","determinant","indicatorProps","css","transitionProperty","transitionDuration","transitionTimingFunction","rootStyles","position","verticalAlign","jsxs","div","className","stroke","strokeWidth","strokeLinecap","opacity","AddToUserCircleModal","subjectAddress","addToUserModalOpen","useSelector","state","accountProfile","dispatch","useDispatch","isLoading","setIsLoading","useState","issuerAddress","signMessage","signError","accountVCBuilder","useVerifiableCredential","useSignErrorHandler","showSuccessMsg","useToastMsg","shortSubAddress","useMemo","trimAddress","onSignButtonClick","useCallback","isAddress","VC","buildAccountTrust","then","signature","i18n","_","values","addUserToUserCircle","setAddToUserModalOpen","finally","RequestSignModal","isOpen","mode","onClose","headerIcon","AvatarBlueIcon","buttonText","Center","VStack","Text","fontWeight","components","noOfLines","AccountReportModal","reportEntity","onSign","visibility","selectedOptions","setSelectedOptions","QuestionRedIcon","MultipleCheckboxOptions","onChange","filter","index","TEEndorsementModal","trustEntity","checkedItems","setCheckedItems","map","args","forEach","_options$index","push","option","Box","background","padding","borderRadius","mt","Checkbox","marginInline","event","handleCheckboxChange","checked","_toConsumableArray","target","label","AccountInfo","address","useEnsName","chainId","mainnet","isConnected","useAccount","accountId","getSubjectDid","trustScores","getAccountTrustScoreForAccountId","spacing","JazzIcon","length","AccountRoleTags","HStack","MoreOptionMenu","AccountReport","connectedAddress","trimmedAddress","pkhAddress","issuer","latestTrustworthinessLevel","getCurrentTrustworthinessLevelForIssuer","isAccountReported","isAccountReportedByIssuer","showModal","setShowModal","reported","setEndorsed","useEffect","showErrorMsg","ReportButton","onClick","isDisabled","undefined","async","buildReportAccountTrust","selected","assertion","getSignedAssertion","createAccountAssertion","action","type","endsWith","fetchAccountAssertionsForAccountId","catch","error","console","log","AccountTEEndorsement","trimedAddress","isAccountEndorsed","isAccountEndorsedByIssuer","endorsed","TrustworthinessScope","SoftwareDevelopment","SoftwareSecurity","EndorseButton","buildTechnicalExpertiseTrust","Set","scope","level","has","fillOptions","userAccount","chain","useNetwork","copyToClipboard","navigator","clipboard","writeText","window","location","origin","openBlockExplorer","_chain$blockExplorers","_chain$blockExplorers2","open","blockExplorers","etherscan","url","shouldShowAddModal","userCircle","includes","IconMenu","icon","MoreOptionIcon","MenuItemCard","UserCircleAddIcon","testId","ShareIcon","ExportOutlineIcon","_ref2","params","URLSearchParams","search","parseAddress","get","getIssuerDid","fetchTrustScoreForAccountId","isMyAccount","paddingTop","NotFound"],"sourceRoot":""}