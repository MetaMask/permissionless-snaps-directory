{"version":3,"file":"component---src-pages-snap-snap-location-snap-slug-tsx-a07e717a64579f22bb68.js","mappings":"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","sources":["webpack://@metamask/snaps-directory/./node_modules/@chakra-ui/layout/dist/chunk-KTD65HY5.mjs","webpack://@metamask/snaps-directory/./src/features/snap/components/activity/ActivityItem.tsx","webpack://@metamask/snaps-directory/./src/features/snap/components/activity/ActivitySection.tsx","webpack://@metamask/snaps-directory/./src/features/snap/components/modals/EndorseSnapModal.tsx","webpack://@metamask/snaps-directory/./src/features/snap/components/EndorseSnap.tsx","webpack://@metamask/snaps-directory/./src/features/snap/components/modals/ReportSnapModal.tsx","webpack://@metamask/snaps-directory/./src/features/snap/components/ReportSnap.tsx","webpack://@metamask/snaps-directory/./src/pages/snap/{Snap.location}/{Snap.slug}.tsx"],"sourcesContent":["'use client'\n\n// src/stack/stack-divider.tsx\nimport { chakra } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar StackDivider = (props) => /* @__PURE__ */ jsx(\n  chakra.div,\n  {\n    className: \"chakra-stack__divider\",\n    ...props,\n    __css: {\n      ...props[\"__css\"],\n      borderWidth: 0,\n      alignSelf: \"stretch\",\n      borderColor: \"inherit\",\n      width: \"auto\",\n      height: \"auto\"\n    }\n  }\n);\nStackDivider.displayName = \"StackDivider\";\n\nexport {\n  StackDivider\n};\n//# sourceMappingURL=chunk-KTD65HY5.mjs.map","import { Box, HStack, Text } from '@chakra-ui/react';\nimport { t } from '@lingui/macro';\nimport { formatDistanceToNow } from 'date-fns';\nimport type { FunctionComponent } from 'react';\nimport { useCallback } from 'react';\n\nimport { StarFilledIcon, WarningIcon } from '../../../../components';\nimport { EntityName } from '../../../../components/EntityName';\nimport type { SnapAssertionState } from '../../assertions/store';\nimport { SnapCurrentStatus } from '../../assertions/types';\n\nexport type ActivityItemProps = {\n  assertion: SnapAssertionState;\n};\n\nexport const ActivityItem: FunctionComponent<ActivityItemProps> = ({\n  assertion,\n}) => {\n  const type = useCallback(() => {\n    if (assertion.currentStatus === SnapCurrentStatus.Endorsed) {\n      return (\n        <span style={{ display: 'flex', alignItems: 'center' }}>\n          <StarFilledIcon width=\"20px\" fill=\"icon.muted\" mr={2} />\n          {t`Endorsed by`}\n        </span>\n      );\n    }\n    return (\n      <span style={{ display: 'flex', alignItems: 'center' }}>\n        <WarningIcon width=\"20px\" fill=\"icon.muted\" mr={2} />\n        {t`Reported by`}\n      </span>\n    );\n  }, [assertion]);\n\n  const reason = useCallback(() => {\n    const reasons = [...(assertion.statusReason?.value ?? [])];\n\n    if (!reasons || reasons.length === 0) {\n      return '';\n    } else if (reasons.length === 1) {\n      return `for ${reasons[0]}`;\n    }\n\n    const lastItem = reasons.pop();\n    const lastItemLink = t`and`;\n\n    return `for ${reasons.join(', ')} ${lastItemLink} ${lastItem}`;\n  }, [assertion]);\n\n  return (\n    <HStack mb={4} width={'100%'} justifyContent={'space-between'}>\n      <HStack>\n        <Text>{type()}</Text>\n        <EntityName subject={assertion.issuer} />\n        <Text>{reason()}</Text>\n      </HStack>\n      <Box alignContent={'flex-end'}>\n        <Text color={'icon.muted'}>\n          {formatDistanceToNow(assertion.issuanceDate, { addSuffix: true })}\n        </Text>\n      </Box>\n    </HStack>\n  );\n};\n","import { Box, Divider, Heading } from '@chakra-ui/react';\nimport { t } from '@lingui/macro';\nimport type { FunctionComponent } from 'react';\n\nimport { ActivityItem } from './ActivityItem';\nimport { useSelector } from '../../../../hooks';\nimport { getIssuedAssertionsForSnapId } from '../../assertions/store';\n\nexport type ActivitySectionProps = {\n  latestChecksum: string;\n};\n\nexport const ActivitySection: FunctionComponent<ActivitySectionProps> = ({\n  latestChecksum,\n}) => {\n  const assertions = useSelector(getIssuedAssertionsForSnapId(latestChecksum));\n\n  if (assertions && assertions.length !== 0) {\n    return (\n      <>\n        <Divider mt=\"3rem\" mb=\"2rem\" />\n        <Heading as=\"h2\" fontSize=\"2xl\" mb=\"2rem\">\n          {t`Activity`}\n        </Heading>\n        <Box data-testid=\"activity-section\">\n          {assertions.map((assertion, index) => (\n            <ActivityItem\n              key={`${assertion.snapId}-${index}`}\n              assertion={assertion}\n            />\n          ))}\n        </Box>\n      </>\n    );\n  }\n\n  return null;\n};\n","import { Center, Link, Text, VStack } from '@chakra-ui/react';\nimport { t, Trans } from '@lingui/macro';\nimport { type FunctionComponent, useState } from 'react';\n\nimport {\n  MultipleCheckboxOptions,\n  RequestSignModal,\n  StarFilledShadowIcon,\n} from '../../../../components';\n\nexport type EndorseSnapModalProps = {\n  snapName: string;\n  options: string[];\n  onSign: (arg: string[]) => Promise<void>;\n  onClose: () => void;\n  isOpen: boolean;\n};\n\nexport const EndorseSnapModal: FunctionComponent<EndorseSnapModalProps> = ({\n  snapName,\n  options,\n  onSign,\n  onClose,\n  isOpen,\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedOptions, setSelectedOptions] = useState([] as string[]);\n\n  const onSignButtonClick = () => {\n    setIsLoading(true);\n\n    onSign(selectedOptions).finally(() => {\n      setIsLoading(false);\n    });\n  };\n\n  return (\n    <RequestSignModal\n      isOpen={isOpen}\n      isLoading={isLoading}\n      mode=\"positive\"\n      headerIcon={<StarFilledShadowIcon fill=\"info.default\" />}\n      buttonText={t`Sign to endorse`}\n      onClose={onClose}\n      onSignButtonClick={onSignButtonClick}\n    >\n      <Center>\n        <VStack textAlign=\"center\" fontSize=\"md\">\n          <Text fontWeight=\"medium\">\n            <Trans>Endorse a Trustworthy Snap</Trans>\n          </Text>\n\n          <Text noOfLines={2} fontWeight=\"regular\" as=\"span\">\n            <Trans>\n              Endorse{' '}\n              <Text variant=\"blue\" as=\"span\">\n                {snapName}\n              </Text>{' '}\n              as trustworthy for your community.\n            </Trans>{' '}\n            <Link>\n              <Trans>Learn more</Trans>\n            </Link>\n          </Text>\n          <MultipleCheckboxOptions\n            options={options}\n            onChange={(values) => {\n              setSelectedOptions(options.filter((_, index) => values[index]));\n            }}\n          />\n        </VStack>\n      </Center>\n    </RequestSignModal>\n  );\n};\n","import { t } from '@lingui/macro';\nimport type { Hex } from '@metamask/utils';\nimport { type FunctionComponent, useEffect, useState } from 'react';\n\nimport { EndorseSnapModal } from './modals/EndorseSnapModal';\nimport { EndorseButton } from '../../../components';\nimport {\n  useDispatch,\n  useSelector,\n  useVerifiableCredential,\n} from '../../../hooks';\nimport { useSignErrorHandler } from '../../../hooks/useSignErrorHandler';\nimport useToastMsg from '../../../hooks/useToastMsg';\nimport {\n  createSnapAssertion,\n  fetchSnapAssertionsForSnapId,\n} from '../assertions/api';\nimport {\n  getCurrentSnapStatusForIssuer,\n  isSnapEndorsedByIssuer,\n} from '../assertions/store';\n\ntype EndorseSnapProps = {\n  address: Hex;\n  snapChecksum: string;\n  snapName: string;\n};\n\nexport const EndorseSnap: FunctionComponent<EndorseSnapProps> = ({\n  address,\n  snapChecksum,\n  snapName,\n}) => {\n  const { signMessage, signError, snapVCBuilder } = useVerifiableCredential();\n\n  const latestSnapStatus = useSelector(\n    getCurrentSnapStatusForIssuer(snapChecksum, address),\n  );\n\n  const isSnapEndorsed = useSelector(\n    isSnapEndorsedByIssuer(snapChecksum, address),\n  );\n\n  const [showModal, setShowModal] = useState(false);\n  const [endorsed, setEndorsed] = useState(isSnapEndorsed);\n\n  useEffect(() => {\n    setEndorsed(isSnapEndorsed);\n  }, [isSnapEndorsed]);\n\n  const dispatch = useDispatch();\n\n  const { showSuccessMsg, showErrorMsg } = useToastMsg();\n\n  useSignErrorHandler(signError);\n\n  // TODO: hardcode options for now, change to dynamic if needed,\n  // TODO may need to consider change options to key value pair to support i18n, key to stored in DB, value is localized string shown in UI.\n  const options = [t`Good user experience`, t`Useful`, t`Seems secure`];\n\n  const onSign = async (selected: string[]) => {\n    const verifiableCredential = snapVCBuilder.buildEndorsedPayload(\n      address,\n      snapChecksum,\n      selected,\n    );\n\n    const signature = await signMessage(verifiableCredential);\n    if (signature) {\n      const assertion = snapVCBuilder.getSignedAssertion(\n        verifiableCredential,\n        signature,\n      );\n      dispatch(createSnapAssertion(assertion))\n        .then((action) => {\n          if (action.type.endsWith('fulfilled')) {\n            dispatch(fetchSnapAssertionsForSnapId(snapChecksum)).catch(\n              (error) => console.log(error),\n            );\n            setEndorsed(true);\n            showSuccessMsg({\n              title: t`Success`,\n              description: t`${snapName} has been endorsed.`,\n            });\n          } else {\n            showErrorMsg({\n              title: t`Error`,\n              description: t`Failed to create endorsement for ${snapName}.`,\n            });\n          }\n        })\n        .catch(() => {\n          showErrorMsg({\n            title: t`Error`,\n            description: t`Failed to create endorsement for ${snapName}.`,\n          });\n        });\n    }\n    setShowModal(false);\n  };\n\n  return (\n    <>\n      <EndorseButton\n        onClick={() => setShowModal(true)}\n        endorsed={endorsed}\n        isDisabled={endorsed || latestSnapStatus !== null}\n      />\n      {showModal && (\n        <EndorseSnapModal\n          snapName={snapName}\n          options={options}\n          isOpen={showModal}\n          onClose={() => setShowModal(false)}\n          onSign={onSign}\n        />\n      )}\n    </>\n  );\n};\n","import { Center, Link, Text, VStack } from '@chakra-ui/react';\nimport { t, Trans } from '@lingui/macro';\nimport { type FunctionComponent, useState } from 'react';\n\nimport {\n  MultipleCheckboxOptions,\n  QuestionRedIcon,\n  RequestSignModal,\n} from '../../../../components';\n\nexport type ReportSnapModalProps = {\n  snapName: string;\n  options: string[];\n  onSign: (arg: string[]) => Promise<void>;\n  onClose: () => void;\n  isOpen: boolean;\n};\n\nexport const ReportSnapModal: FunctionComponent<ReportSnapModalProps> = ({\n  snapName,\n  options,\n  onSign,\n  onClose,\n  isOpen,\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedOptions, setSelectedOptions] = useState([] as string[]);\n\n  const onSignButtonClick = () => {\n    setIsLoading(true);\n\n    onSign(selectedOptions).finally(() => {\n      setIsLoading(false);\n    });\n  };\n\n  return (\n    <RequestSignModal\n      isOpen={isOpen}\n      isLoading={isLoading}\n      mode=\"negative\"\n      headerIcon={<QuestionRedIcon fill=\"error.default\" />}\n      buttonText={t`Sign to report`}\n      onClose={onClose}\n      onSignButtonClick={onSignButtonClick}\n    >\n      <Center>\n        <VStack textAlign=\"center\" fontSize=\"md\">\n          <Text fontWeight=\"medium\">\n            <Trans>Report an Untrustworthy Snap</Trans>\n          </Text>\n\n          <Text noOfLines={2} as=\"span\">\n            <Trans>\n              Report{' '}\n              <Text variant=\"blue\" as=\"span\">\n                {snapName}\n              </Text>{' '}\n              as untrustworthy to safeguard your community.\n            </Trans>{' '}\n            <Link>\n              <Trans>Learn more</Trans>\n            </Link>\n          </Text>\n          <MultipleCheckboxOptions\n            options={options}\n            onChange={(values) => {\n              setSelectedOptions(\n                options.filter((_, index) => values[index] === true),\n              );\n            }}\n          />\n        </VStack>\n      </Center>\n    </RequestSignModal>\n  );\n};\n","import { t } from '@lingui/macro';\nimport type { Hex } from '@metamask/utils';\nimport { useState, type FunctionComponent, useEffect } from 'react';\n\nimport { ReportSnapModal } from './modals/ReportSnapModal';\nimport { ReportButton } from '../../../components';\nimport {\n  useDispatch,\n  useSelector,\n  useVerifiableCredential,\n} from '../../../hooks';\nimport { useSignErrorHandler } from '../../../hooks/useSignErrorHandler';\nimport useToastMsg from '../../../hooks/useToastMsg';\nimport {\n  createSnapAssertion,\n  fetchSnapAssertionsForSnapId,\n} from '../assertions/api';\nimport {\n  getCurrentSnapStatusForIssuer,\n  isSnapReportedByIssuer,\n} from '../assertions/store';\nimport { SnapCurrentStatus } from '../assertions/types';\n\ntype ReportSnapProps = {\n  address: Hex;\n  snapChecksum: string;\n  snapName: string;\n};\n\nexport const ReportSnap: FunctionComponent<ReportSnapProps> = ({\n  address,\n  snapChecksum,\n  snapName,\n}) => {\n  const { signMessage, signError, snapVCBuilder } = useVerifiableCredential();\n\n  const issuer = snapVCBuilder.getIssuerDid(address);\n\n  const latestSnapStatus = useSelector(\n    getCurrentSnapStatusForIssuer(snapChecksum, issuer),\n  );\n\n  const isSnapReported = useSelector(\n    isSnapReportedByIssuer(snapChecksum, issuer),\n  );\n\n  const [showModal, setShowModal] = useState(false);\n  const [reported, setReported] = useState(isSnapReported);\n\n  useEffect(() => {\n    setReported(isSnapReported);\n  }, [isSnapReported]);\n\n  const dispatch = useDispatch();\n\n  const { showSuccessMsg, showErrorMsg } = useToastMsg();\n\n  useSignErrorHandler(signError);\n\n  // TODO: hardcode options for now, change to dynamic if needed,\n  // TODO may need to consider change options to key value pair to support i18n, key to stored in DB, value is localized string shown in UI.\n  const options = [t`Scam`, t`Vulnerable`];\n\n  const onSign = async (selected: string[]) => {\n    const VC = snapVCBuilder.buildDisputedPayload(\n      address,\n      snapChecksum,\n      selected,\n    );\n\n    const signature = await signMessage(VC);\n    if (signature) {\n      const assertion = snapVCBuilder.getSignedAssertion(VC, signature);\n      dispatch(createSnapAssertion(assertion))\n        .then(async (action) => {\n          if (action.type.endsWith('fulfilled')) {\n            dispatch(fetchSnapAssertionsForSnapId(snapChecksum)).catch(\n              (error) => console.log(error),\n            );\n            setReported(true);\n            showSuccessMsg({\n              title: t`Success`,\n              description: t`${snapName} has been reported.`,\n            });\n          } else {\n            showErrorMsg({\n              title: t`Error`,\n              description: t`Failed to create report for ${snapName}.`,\n            });\n          }\n        })\n        .catch(() => {\n          showErrorMsg({\n            title: t`Error`,\n            description: t`Failed to create report for ${snapName}.`,\n          });\n        });\n    }\n    setShowModal(false);\n  };\n\n  return (\n    <>\n      <ReportButton\n        onClick={() => setShowModal(true)}\n        reported={reported}\n        isDisabled={reported || latestSnapStatus === SnapCurrentStatus.Disputed}\n      />\n      {showModal && (\n        <ReportSnapModal\n          snapName={snapName}\n          options={options}\n          isOpen={showModal}\n          onClose={() => setShowModal(false)}\n          onSign={onSign}\n        />\n      )}\n    </>\n  );\n};\n","import {\n  Box,\n  Container,\n  Divider,\n  Flex,\n  Stack,\n  StackDivider,\n} from '@chakra-ui/react';\nimport { graphql } from 'gatsby';\nimport { type FunctionComponent } from 'react';\nimport { useAccount } from 'wagmi';\n\nimport { InstallSnapButton, SnapWebsiteButton } from '../../../components';\nimport { RegistrySnapCategory } from '../../../constants';\nimport {\n  Authorship,\n  Description,\n  Metadata,\n  NotificationAcknowledger,\n  Permissions,\n  RelatedSnaps,\n  useGetInstalledSnapsQuery,\n} from '../../../features';\nimport { ActivitySection } from '../../../features/snap/components/activity/ActivitySection';\nimport { EndorseSnap } from '../../../features/snap/components/EndorseSnap';\nimport { ReportSnap } from '../../../features/snap/components/ReportSnap';\nimport type { Fields } from '../../../utils';\n\ntype SnapPageProps = {\n  data: {\n    snap: Fields<\n      Queries.Snap,\n      | 'name'\n      | 'icon'\n      | 'snapId'\n      | 'description'\n      | 'latestVersion'\n      | 'latestChecksum'\n      | 'website'\n      | 'onboard'\n      | 'category'\n      | 'author'\n      | 'sourceCode'\n      | 'additionalSourceCode'\n      | 'audits'\n      | 'banner'\n      | 'support'\n      | 'permissions'\n      | 'privateCode'\n      | 'privacyPolicy'\n      | 'termsOfUse'\n    >;\n  };\n};\n\nconst SnapPage: FunctionComponent<SnapPageProps> = ({ data }) => {\n  const {\n    name,\n    snapId,\n    icon,\n    website,\n    onboard,\n    description,\n    latestVersion,\n    latestChecksum,\n    category,\n    permissions,\n  } = data.snap;\n\n  const { data: installedSnaps } = useGetInstalledSnapsQuery();\n  const isInstalled = Boolean(installedSnaps?.[snapId]);\n  const { address, isConnected } = useAccount();\n\n  return (\n    <Box position=\"relative\">\n      <Box\n        pointerEvents=\"none\"\n        position=\"absolute\"\n        top=\"-50%\"\n        width=\"100%\"\n        height=\"75%\"\n        sx={{\n          background: `url(\"${icon}\") no-repeat center center`,\n          backgroundSize: 'cover',\n          filter: 'blur(96px) saturate(1.2)',\n          opacity: '0.25',\n        }}\n      />\n      <Container maxWidth=\"container.xl\" paddingTop=\"0\" marginTop=\"20\">\n        <NotificationAcknowledger snapId={snapId} version={latestVersion} />\n        <Flex\n          flexDirection={['column', null, 'row']}\n          justifyContent=\"space-between\"\n          alignItems=\"center\"\n          gap=\"6\"\n        >\n          <Authorship name={name} icon={icon} snapId={snapId} />\n          <Flex alignItems=\"center\" gap=\"4\" width={['100%', null, 'auto']}>\n            {isConnected && address && (\n              <ReportSnap\n                snapName={name}\n                snapChecksum={latestChecksum}\n                address={address}\n              />\n            )}\n            {isConnected && address && (\n              <EndorseSnap\n                snapName={name}\n                snapChecksum={latestChecksum}\n                address={address}\n              />\n            )}\n            {!onboard && (\n              <InstallSnapButton\n                snapId={snapId}\n                name={name}\n                icon={icon}\n                website={website}\n                version={latestVersion}\n              />\n            )}\n            {(isInstalled || onboard) && website && (\n              <SnapWebsiteButton snapId={snapId} website={website} />\n            )}\n          </Flex>\n        </Flex>\n\n        <Divider marginY=\"8\" />\n        <Metadata snap={data.snap} />\n        <Divider marginTop=\"8\" marginBottom=\"12\" />\n\n        <Stack\n          direction={['column', null, null, 'row']}\n          divider={<StackDivider />}\n          marginTop=\"2\"\n          marginBottom=\"12\"\n          spacing=\"8\"\n        >\n          <Description name={name} description={description} />\n          <Permissions snap={data.snap} permissions={permissions} />\n        </Stack>\n\n        <ActivitySection latestChecksum={latestChecksum} />\n\n        {/* TODO: Enable account management category when there are more Snaps\n            in the registry. */}\n        {category && category !== RegistrySnapCategory.AccountManagement && (\n          <>\n            <Divider my=\"12\" />\n            <RelatedSnaps\n              snapId={snapId}\n              category={category as RegistrySnapCategory}\n            />\n          </>\n        )}\n      </Container>\n    </Box>\n  );\n};\n\ntype HeadProps = SnapPageProps & {\n  data: {\n    site: {\n      siteMetadata: Fields<\n        Queries.SiteSiteMetadata,\n        'title' | 'description' | 'author' | 'siteUrl'\n      >;\n    };\n  };\n};\n\nexport const Head: FunctionComponent<HeadProps> = ({ data }) => {\n  const title = `${data.snap.name} on the MetaMask Snaps Directory`;\n  const description = `Customize your web3 experience with ${data.snap.name}.`;\n  const image = `${data.site.siteMetadata.siteUrl}${data.snap.banner.publicURL}`;\n\n  return (\n    <>\n      <html lang=\"en\" />\n      <title>{title}</title>\n      <meta name=\"description\" content={description} />\n      <meta property=\"og:title\" content={data.snap.name} />\n      <meta property=\"og:site_name\" content={data.site.siteMetadata.title} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"og:image\" content={image} />\n      <meta name=\"og:image:width\" content=\"1200\" />\n      <meta name=\"og:image:height\" content=\"630\" />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:creator\" content={data.site.siteMetadata.author} />\n      <meta name=\"twitter:title\" content={data.snap.name} />\n      <meta name=\"twitter:description\" content={description} />\n      <meta name=\"twitter:image\" content={image} />\n    </>\n  );\n};\n\nexport const query = graphql`\n  query ($id: String) {\n    snap(id: { eq: $id }) {\n      name\n      snapId\n      icon\n      description {\n        description\n        trusted\n      }\n      latestVersion\n      latestChecksum\n      website\n      onboard\n      category\n      author {\n        address\n        name\n        website\n      }\n      sourceCode\n      additionalSourceCode {\n        name\n        url\n      }\n      audits {\n        auditor\n        report\n      }\n      banner {\n        publicURL\n      }\n      support {\n        contact\n        faq\n        knowledgeBase\n        keyRecovery\n      }\n      permissions\n      privateCode\n      privacyPolicy\n      termsOfUse\n    }\n\n    site {\n      siteMetadata {\n        title\n        description\n        author\n        siteUrl\n      }\n    }\n  }\n`;\n\nexport default SnapPage;\n"],"names":["StackDivider","props","jsx","div","className","__css","borderWidth","alignSelf","borderColor","width","height","displayName","ActivityItem","_ref","assertion","type","useCallback","currentStatus","SnapCurrentStatus","Endorsed","_jsxs","style","display","alignItems","children","_jsx","StarFilledIcon","fill","mr","i18n","_","id","WarningIcon","reason","_assertion$statusReas","_assertion$statusReas2","reasons","_toConsumableArray","statusReason","value","length","lastItem","pop","lastItemLink","join","HStack","mb","justifyContent","Text","EntityName","subject","issuer","Box","alignContent","color","formatDistanceToNow","issuanceDate","addSuffix","ActivitySection","latestChecksum","assertions","useSelector","getIssuedAssertionsForSnapId","_Fragment","Divider","mt","Heading","as","fontSize","map","index","snapId","EndorseSnapModal","snapName","options","onSign","onClose","isOpen","isLoading","setIsLoading","useState","selectedOptions","setSelectedOptions","RequestSignModal","mode","headerIcon","StarFilledShadowIcon","buttonText","onSignButtonClick","finally","Center","VStack","textAlign","fontWeight","Trans","noOfLines","values","components","variant","Link","MultipleCheckboxOptions","onChange","filter","EndorseSnap","address","snapChecksum","signMessage","signError","snapVCBuilder","useVerifiableCredential","latestSnapStatus","getCurrentSnapStatusForIssuer","isSnapEndorsed","isSnapEndorsedByIssuer","showModal","setShowModal","endorsed","setEndorsed","useEffect","dispatch","useDispatch","showSuccessMsg","showErrorMsg","useToastMsg","useSignErrorHandler","EndorseButton","onClick","isDisabled","async","verifiableCredential","buildEndorsedPayload","selected","signature","getSignedAssertion","createSnapAssertion","then","action","endsWith","fetchSnapAssertionsForSnapId","catch","error","console","log","title","description","ReportSnapModal","QuestionRedIcon","ReportSnap","getIssuerDid","isSnapReported","isSnapReportedByIssuer","reported","setReported","ReportButton","Disputed","VC","buildDisputedPayload","Head","_ref2","data","snap","name","image","site","siteMetadata","siteUrl","banner","publicURL","lang","content","property","author","icon","website","onboard","latestVersion","category","permissions","installedSnaps","useGetInstalledSnapsQuery","isInstalled","Boolean","isConnected","useAccount","position","pointerEvents","top","sx","background","backgroundSize","opacity","Container","maxWidth","paddingTop","marginTop","NotificationAcknowledger","version","Flex","flexDirection","gap","Authorship","InstallSnapButton","SnapWebsiteButton","marginY","Metadata","marginBottom","Stack","direction","divider","spacing","Description","Permissions","RegistrySnapCategory","AccountManagement","my","RelatedSnaps"],"sourceRoot":""}