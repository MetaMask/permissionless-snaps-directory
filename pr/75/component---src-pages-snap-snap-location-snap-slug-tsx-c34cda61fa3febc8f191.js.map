{"version":3,"file":"component---src-pages-snap-snap-location-snap-slug-tsx-c34cda61fa3febc8f191.js","mappings":"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","sources":["webpack://@metamask/snaps-directory/./src/features/snap/components/modals/ReportSnapModal.tsx","webpack://@metamask/snaps-directory/./src/features/snap/components/ReportSnap.tsx","webpack://@metamask/snaps-directory/./src/pages/snap/{Snap.location}/{Snap.slug}.tsx"],"sourcesContent":["import { Center, Link, Text, VStack } from '@chakra-ui/react';\nimport { Trans, t } from '@lingui/macro';\nimport { useState, type FunctionComponent } from 'react';\n\nimport { QuestionRedIcon, RequestSignModal } from '../../../../components';\n\nexport type ReportSnapModalProps = {\n  snapName: string;\n  onSign: () => Promise<void>;\n  onClose: () => void;\n  isOpen: boolean;\n};\n\nexport const ReportSnapModal: FunctionComponent<ReportSnapModalProps> = ({\n  snapName,\n  onSign,\n  onClose,\n  isOpen,\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const onSignButtonClick = () => {\n    setIsLoading(true);\n\n    onSign().finally(() => {\n      setIsLoading(false);\n    });\n  };\n\n  return (\n    <RequestSignModal\n      isOpen={isOpen}\n      isLoading={isLoading}\n      mode=\"negative\"\n      headerIcon={<QuestionRedIcon />}\n      buttonText={t`Sign to report`}\n      onClose={onClose}\n      onSignButtonClick={onSignButtonClick}\n    >\n      <Center>\n        <VStack textAlign=\"center\">\n          <Text fontSize=\"md\" fontWeight=\"bold\">\n            <Trans>\n              Report for{' '}\n              <Text variant=\"blue\" as=\"span\">\n                {snapName}\n              </Text>{' '}\n              as a malicious snap\n            </Trans>\n          </Text>\n\n          <Text fontSize=\"sm\" noOfLines={2} as=\"span\">\n            <Trans>\n              This action will flag the snap as a malicious in your community.\n            </Trans>\n            <Link>\n              <Trans>Learn more</Trans>\n            </Link>\n          </Text>\n        </VStack>\n      </Center>\n    </RequestSignModal>\n  );\n};\n","import { useState, type FunctionComponent } from 'react';\n\nimport { ReportSnapModal } from './modals/ReportSnapModal';\nimport { ReportButton } from '../../../components';\n\ntype SnapReportProps = {\n  snapName: string;\n};\n\nexport const SnapReport: FunctionComponent<SnapReportProps> = ({\n  snapName,\n}) => {\n  const [showModal, setShowModal] = useState(false);\n  const [reported, setReported] = useState(false);\n\n  const onSign = async () => {\n    setShowModal(false);\n    setReported(true);\n  };\n\n  return (\n    <>\n      <ReportButton\n        onClick={() => setShowModal(true)}\n        reported={reported}\n        size=\"lg\"\n      />\n      {showModal && (\n        <ReportSnapModal\n          snapName={snapName}\n          isOpen={showModal}\n          onClose={() => setShowModal(false)}\n          onSign={onSign}\n        />\n      )}\n    </>\n  );\n};\n","import { Box, Container, Divider, Flex, Text } from '@chakra-ui/react';\nimport { Trans } from '@lingui/macro';\nimport { graphql } from 'gatsby';\nimport { type FunctionComponent } from 'react';\nimport { useAccount } from 'wagmi';\n\nimport { InstallSnapButton, SnapWebsiteButton } from '../../../components';\nimport { type RegistrySnapCategory } from '../../../constants';\nimport {\n  Authorship,\n  Description,\n  Metadata,\n  RelatedSnaps,\n  useGetInstalledSnapsQuery,\n} from '../../../features';\nimport { NotificationAcknowledger } from '../../../features/notifications/components';\nimport { SnapReport } from '../../../features/snap/components/ReportSnap';\nimport type { Fields } from '../../../utils';\n\ntype SnapPageProps = {\n  data: {\n    snap: Fields<\n      Queries.Snap,\n      | 'name'\n      | 'icon'\n      | 'snapId'\n      | 'description'\n      | 'latestVersion'\n      | 'website'\n      | 'onboard'\n      | 'category'\n      | 'author'\n      | 'sourceCode'\n      | 'audits'\n      | 'banner'\n      | 'support'\n    >;\n  };\n};\n\nconst SnapPage: FunctionComponent<SnapPageProps> = ({ data }) => {\n  const {\n    name,\n    snapId,\n    icon,\n    website,\n    onboard,\n    description,\n    latestVersion,\n    category,\n  } = data.snap;\n\n  const { data: installedSnaps } = useGetInstalledSnapsQuery();\n  const isInstalled = Boolean(installedSnaps?.[snapId]);\n  const { isConnected } = useAccount();\n\n  return (\n    <Box position=\"relative\">\n      <Box\n        pointerEvents=\"none\"\n        position=\"absolute\"\n        top=\"-50%\"\n        width=\"100%\"\n        height=\"75%\"\n        sx={{\n          background: `url(\"${icon}\") no-repeat center center`,\n          backgroundSize: 'cover',\n          filter: 'blur(96px) saturate(1.2)',\n          opacity: '0.25',\n        }}\n      />\n      <Container maxWidth=\"container.xl\" paddingTop=\"0\" marginTop=\"20\">\n        <NotificationAcknowledger snapId={snapId} version={latestVersion} />\n        <Flex\n          flexDirection={['column', null, 'row']}\n          justifyContent=\"space-between\"\n          alignItems=\"center\"\n          gap=\"6\"\n        >\n          <Authorship name={name} icon={icon} snapId={snapId} />\n          <Flex alignItems=\"center\" gap=\"4\" width={['100%', null, 'auto']}>\n            {isConnected && <SnapReport snapName={name} />}\n            {!onboard && (\n              <InstallSnapButton\n                snapId={snapId}\n                name={name}\n                icon={icon}\n                website={website}\n                version={latestVersion}\n              />\n            )}\n            {(isInstalled || onboard) && website && (\n              <SnapWebsiteButton snapId={snapId} website={website} />\n            )}\n          </Flex>\n        </Flex>\n\n        <Divider marginY=\"6\" />\n        <Metadata snap={data.snap} />\n\n        <Text\n          color=\"text.alternative\"\n          textTransform=\"uppercase\"\n          fontWeight=\"medium\"\n          fontSize=\"sm\"\n        >\n          <Trans>\n            Description by{' '}\n            <Text\n              as=\"span\"\n              color=\"text.default\"\n              textTransform=\"uppercase\"\n              fontWeight=\"medium\"\n              fontSize=\"sm\"\n            >\n              {name}\n            </Text>\n          </Trans>\n        </Text>\n        <Description\n          description={description}\n          marginTop=\"2\"\n          whiteSpace=\"pre-wrap\"\n        />\n\n        {category && (\n          <>\n            <Divider my=\"12\" />\n            <RelatedSnaps\n              snapId={snapId}\n              category={category as RegistrySnapCategory}\n            />\n          </>\n        )}\n      </Container>\n    </Box>\n  );\n};\n\ntype HeadProps = SnapPageProps & {\n  data: {\n    site: {\n      siteMetadata: Fields<\n        Queries.SiteSiteMetadata,\n        'title' | 'description' | 'author' | 'siteUrl'\n      >;\n    };\n  };\n};\n\nexport const Head: FunctionComponent<HeadProps> = ({ data }) => {\n  const title = `${data.snap.name} on the MetaMask Snaps Directory`;\n  const description = `Customize your web3 experience with ${data.snap.name}.`;\n  const image = `${data.site.siteMetadata.siteUrl}${data.snap.banner.publicURL}`;\n\n  return (\n    <>\n      <html lang=\"en\" />\n      <title>{title}</title>\n      <meta name=\"description\" content={description} />\n      <meta property=\"og:title\" content={data.snap.name} />\n      <meta property=\"og:site_name\" content={data.site.siteMetadata.title} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"og:image\" content={image} />\n      <meta name=\"og:image:width\" content=\"1200\" />\n      <meta name=\"og:image:height\" content=\"630\" />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:creator\" content={data.site.siteMetadata.author} />\n      <meta name=\"twitter:title\" content={data.snap.name} />\n      <meta name=\"twitter:description\" content={description} />\n      <meta name=\"twitter:image\" content={image} />\n    </>\n  );\n};\n\nexport const query = graphql`\n  query ($id: String) {\n    snap(id: { eq: $id }) {\n      name\n      snapId\n      icon\n      description {\n        description\n        trusted\n      }\n      latestVersion\n      website\n      onboard\n      category\n      author {\n        name\n        website\n      }\n      sourceCode\n      audits {\n        auditor\n        report\n      }\n      banner {\n        publicURL\n      }\n      support {\n        contact\n        faq\n        knowledgeBase\n      }\n    }\n\n    site {\n      siteMetadata {\n        title\n        description\n        author\n        siteUrl\n      }\n    }\n  }\n`;\n\nexport default SnapPage;\n"],"names":["ReportSnapModal","_ref","snapName","onSign","onClose","isOpen","isLoading","setIsLoading","useState","_jsx","RequestSignModal","mode","headerIcon","QuestionRedIcon","buttonText","i18n","_","id","onSignButtonClick","finally","children","Center","_jsxs","VStack","textAlign","Text","fontSize","fontWeight","Trans","values","components","variant","as","noOfLines","Link","SnapReport","showModal","setShowModal","reported","setReported","_Fragment","ReportButton","onClick","size","async","Head","_ref2","data","title","snap","name","description","image","site","siteMetadata","siteUrl","banner","publicURL","lang","content","property","author","snapId","icon","website","onboard","latestVersion","category","installedSnaps","useGetInstalledSnapsQuery","isInstalled","Boolean","isConnected","useAccount","Box","position","pointerEvents","top","width","height","sx","background","backgroundSize","filter","opacity","Container","maxWidth","paddingTop","marginTop","NotificationAcknowledger","version","Flex","flexDirection","justifyContent","alignItems","gap","Authorship","InstallSnapButton","SnapWebsiteButton","Divider","marginY","Metadata","color","textTransform","Description","whiteSpace","my","RelatedSnaps"],"sourceRoot":""}