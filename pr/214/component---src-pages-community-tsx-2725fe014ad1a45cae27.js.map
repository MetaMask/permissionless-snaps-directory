{"version":3,"file":"component---src-pages-community-tsx-2725fe014ad1a45cae27.js","mappings":"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","sources":["webpack://@metamask/snaps-directory/./src/features/users/filter/components/FilterButton.tsx","webpack://@metamask/snaps-directory/./src/features/users/filter/components/FilterItem.tsx","webpack://@metamask/snaps-directory/./src/features/users/filter/constants.tsx","webpack://@metamask/snaps-directory/./src/features/users/filter/components/FilterCategory.tsx","webpack://@metamask/snaps-directory/./src/features/users/filter/components/FilterTag.tsx","webpack://@metamask/snaps-directory/./src/features/users/filter/components/FilterTags.tsx","webpack://@metamask/snaps-directory/./src/features/users/filter/Filter.tsx","webpack://@metamask/snaps-directory/./src/pages/community.tsx"],"sourcesContent":["import { forwardRef, IconButton } from '@chakra-ui/react';\nimport { t } from '@lingui/macro';\nimport type { FunctionComponent, ReactNode } from 'react';\n\nimport { FilterIcon } from '../../../../components';\n\nexport type FilterButtonProps = {\n  children?: ReactNode;\n};\n\n// TODO: this can be moved to a shared component\nexport const FilterButton: FunctionComponent<FilterButtonProps> = forwardRef<\n  FilterButtonProps,\n  'button'\n>((props, ref) => (\n  <IconButton\n    ref={ref}\n    data-testid=\"filter-button\"\n    {...props}\n    variant=\"filter\"\n    isRound={true}\n    aria-label={t`Open filter menu`}\n    height=\"auto\"\n    icon={<FilterIcon width=\"1.25rem\" />}\n    flexShrink=\"0\"\n  />\n));\n","import type { MenuItemProps } from '@chakra-ui/react';\nimport { MenuItem, Stack } from '@chakra-ui/react';\nimport type { FunctionComponent, ReactNode } from 'react';\n\nimport { CheckThinIcon } from '../../../../components';\n\nexport type FilterItemProps = MenuItemProps & {\n  checked: boolean;\n  children: ReactNode;\n};\n\nexport const FilterItem: FunctionComponent<FilterItemProps> = ({\n  children,\n  checked,\n  ...props\n}) => (\n  <MenuItem height=\"3rem\" borderRadius=\"md\" {...props}>\n    <Stack direction=\"row\" alignItems=\"center\" gap=\"2\" width=\"100%\">\n      <CheckThinIcon\n        width=\"0.831rem\"\n        height=\"0.573rem\"\n        visibility={checked ? 'initial' : 'hidden'}\n      />\n      {children}\n    </Stack>\n  </MenuItem>\n);\n","import type { MessageDescriptor } from '@lingui/core';\nimport { defineMessage } from '@lingui/macro';\n\nimport { UserCategory } from '../store';\n\nexport const USER_CATEGORY_LABELS: Record<\n  UserCategory,\n  {\n    name: MessageDescriptor;\n    description: MessageDescriptor;\n  }\n> = {\n  [UserCategory.Auditor]: {\n    name: defineMessage`Auditor`,\n    description: defineMessage`Show auditors from existing snaps.`,\n  },\n  [UserCategory.Builder]: {\n    name: defineMessage`Builder`,\n    description: defineMessage`Show builders who have developed at least one snap.`,\n  },\n  [UserCategory.SecurityEngineer]: {\n    name: defineMessage`Security Engineer`,\n    description: defineMessage`Show security engineers.`,\n  },\n  [UserCategory.SoftwareEngineer]: {\n    name: defineMessage`Software Engineer`,\n    description: defineMessage`Show software engineers from the community.`,\n  },\n};\n","import { Box, Text } from '@chakra-ui/react';\nimport { Trans } from '@lingui/react';\nimport { type FunctionComponent } from 'react';\n\nimport { FilterItem } from './FilterItem';\nimport { useDispatch, useSelector } from '../../../../hooks';\nimport { getCategory, toggleCategory, type UserCategory } from '../../store';\nimport { USER_CATEGORY_LABELS } from '../constants';\n\nexport type FilterCategoryProps = {\n  category: UserCategory;\n};\n\nexport const FilterCategory: FunctionComponent<FilterCategoryProps> = ({\n  category,\n}) => {\n  const dispatch = useDispatch();\n  const checked = useSelector(getCategory(category));\n\n  const handleClick = () => {\n    dispatch(toggleCategory({ category }));\n  };\n\n  return (\n    <FilterItem checked={checked} onClick={handleClick}>\n      <Text>\n        <Trans id={USER_CATEGORY_LABELS[category].name.id} />\n      </Text>\n      <Box flexGrow={1} />\n    </FilterItem>\n  );\n};\n","import { Tag, TagLabel } from '@chakra-ui/react';\nimport { Trans } from '@lingui/react';\nimport { type FunctionComponent } from 'react';\n\nimport { CloseIcon } from '../../../../components';\nimport type { UserCategory } from '../../store';\nimport { USER_CATEGORY_LABELS } from '../constants';\n\nexport type FilterTagProps = {\n  category: UserCategory;\n  handleClick: (category: UserCategory) => void;\n};\n\nexport const FilterTag: FunctionComponent<FilterTagProps> = ({\n  category,\n  handleClick,\n}) => {\n  return (\n    <Tag variant=\"category\">\n      <TagLabel>\n        <Trans\n          data-testid=\"trans-component\"\n          id={USER_CATEGORY_LABELS[category].name.message ?? ''}\n        />\n      </TagLabel>\n      <CloseIcon\n        data-testid={`filter-${category}-close`}\n        onClick={() => handleClick(category)}\n        cursor=\"pointer\"\n        marginLeft=\"1.5\"\n        width=\"0.6875rem\"\n      />\n    </Tag>\n  );\n};\n","import { Tag, TagLabel } from '@chakra-ui/react';\nimport { Trans } from '@lingui/macro';\nimport { useEffect, type FunctionComponent } from 'react';\nimport { useAccount } from 'wagmi';\n\nimport { FilterTag } from './FilterTag';\nimport { CloseIcon } from '../../../../components';\nimport { useDispatch, useSelector } from '../../../../hooks';\nimport { fetchUsers } from '../../api';\nimport type { UserCategory } from '../../store';\nimport {\n  getCategories,\n  getEndorsedByYou,\n  getReportedByYou,\n  getShowReportedUsers,\n  toggleCategory,\n  toggleEndorsedByYou,\n  toggleReportedByYou,\n  toggleShowReportedUsers,\n} from '../../store';\n\nexport const FilterTags: FunctionComponent = () => {\n  const dispatch = useDispatch();\n  const { address: connectedAddress, isConnected } = useAccount();\n  const categories = useSelector(getCategories);\n  const endorsedByYou = useSelector(getEndorsedByYou);\n  const reportedByYou = useSelector(getReportedByYou);\n  const showReportedUsers = useSelector(getShowReportedUsers);\n\n  useEffect(() => {\n    dispatch(\n      fetchUsers({\n        categories,\n        endorsedByYou: isConnected ? endorsedByYou : false,\n        reportedByYou: isConnected ? reportedByYou : false,\n        showReportedUsers,\n        userId: isConnected ? connectedAddress : undefined,\n      }),\n    ).catch(() => {\n      console.error('Failed to filter users');\n    });\n  }, [\n    categories,\n    endorsedByYou,\n    reportedByYou,\n    showReportedUsers,\n    dispatch,\n    isConnected,\n    connectedAddress,\n  ]);\n\n  const handleCategoryClick = (category: UserCategory) => {\n    dispatch(toggleCategory({ category }));\n  };\n\n  const handleClickEndorsedByYou = () => {\n    dispatch(toggleEndorsedByYou());\n  };\n\n  const handleClickReportedByYou = () => {\n    dispatch(toggleReportedByYou());\n  };\n\n  const handleClickShowReportedUsers = () => {\n    dispatch(toggleShowReportedUsers());\n  };\n\n  return (\n    <>\n      {isConnected && endorsedByYou && (\n        <Tag\n          variant=\"category\"\n          background=\"success.muted\"\n          color=\"success.default\"\n        >\n          <TagLabel>\n            <Trans>Endorsed by you</Trans>\n          </TagLabel>\n          <CloseIcon\n            data-testid=\"filter-endorsed-by-you-close\"\n            onClick={handleClickEndorsedByYou}\n            cursor=\"pointer\"\n            marginLeft=\"1.5\"\n            width=\"0.6875rem\"\n          />\n        </Tag>\n      )}\n      {isConnected && reportedByYou && (\n        <Tag\n          variant=\"category\"\n          background=\"success.muted\"\n          color=\"success.default\"\n        >\n          <TagLabel>\n            <Trans>Reported by you</Trans>\n          </TagLabel>\n          <CloseIcon\n            data-testid=\"filter-reported-by-you-close\"\n            onClick={handleClickReportedByYou}\n            cursor=\"pointer\"\n            marginLeft=\"1.5\"\n            width=\"0.6875rem\"\n          />\n        </Tag>\n      )}\n      {categories.map((category) => (\n        <FilterTag\n          key={category}\n          category={category}\n          handleClick={handleCategoryClick}\n        />\n      ))}\n      {showReportedUsers && (\n        <Tag variant=\"category\" background=\"error.muted\" color=\"error.default\">\n          <TagLabel>\n            <Trans>Reported users</Trans>\n          </TagLabel>\n          <CloseIcon\n            data-testid=\"filter-reported-users-close\"\n            onClick={handleClickShowReportedUsers}\n            cursor=\"pointer\"\n            marginLeft=\"1.5\"\n            width=\"0.6875rem\"\n          />\n        </Tag>\n      )}\n    </>\n  );\n};\n","import {\n  Menu,\n  MenuButton,\n  MenuGroup,\n  MenuList,\n  Text,\n  Stack,\n  Divider,\n} from '@chakra-ui/react';\nimport { t, Trans } from '@lingui/macro';\nimport type { FunctionComponent } from 'react';\n\nimport {\n  FilterButton,\n  FilterCategory,\n  FilterItem,\n  FilterTags,\n} from './components';\nimport { USER_CATEGORY_LABELS } from './constants';\nimport { useDispatch, useSelector } from '../../../hooks';\nimport {\n  getEndorsedByYou,\n  getReportedByYou,\n  getShowReportedUsers,\n  toggleEndorsedByYou,\n  toggleReportedByYou,\n  toggleShowReportedUsers,\n} from '../store';\nimport { type UserCategory } from '../store';\n\nexport const Filter: FunctionComponent = () => {\n  const dispatch = useDispatch();\n  const endorsedByYou = useSelector(getEndorsedByYou);\n  const reportedByYou = useSelector(getReportedByYou);\n  const showReportedUsers = useSelector(getShowReportedUsers);\n\n  const handleClickEndorsedByYou = () => {\n    dispatch(toggleEndorsedByYou());\n  };\n\n  const handleClickReportedByYou = () => {\n    dispatch(toggleReportedByYou());\n  };\n\n  const handleClickShowReportedUsers = () => {\n    dispatch(toggleShowReportedUsers());\n  };\n\n  return (\n    <Stack direction=\"row\" spacing={2} flexWrap=\"wrap\">\n      <Menu closeOnSelect={false} isLazy={true}>\n        <MenuButton as={FilterButton} />\n        <MenuList width=\"17.188rem\" boxShadow=\"md\">\n          <MenuGroup marginLeft=\"2\" title={t`For you`} data-testid=\"menu-group\">\n            <FilterItem\n              checked={endorsedByYou}\n              onClick={handleClickEndorsedByYou}\n            >\n              <Text>\n                <Trans>Endorsed by you</Trans>\n              </Text>\n            </FilterItem>\n            <FilterItem\n              checked={reportedByYou}\n              onClick={handleClickReportedByYou}\n            >\n              <Text>\n                <Trans>Reported by you</Trans>\n              </Text>\n            </FilterItem>\n          </MenuGroup>\n          <Divider borderColor={'#E2E8F0'} />\n          <MenuGroup\n            marginLeft=\"2\"\n            title={t`Categories`}\n            data-testid=\"menu-group\"\n          >\n            {Object.entries(USER_CATEGORY_LABELS).map(\n              ([category, { name }]) => (\n                <FilterCategory\n                  key={name.id}\n                  category={category as UserCategory}\n                />\n              ),\n            )}\n          </MenuGroup>\n          <Divider borderColor={'#E2E8F0'} />\n          <MenuGroup marginLeft=\"2\" title={''}>\n            <FilterItem\n              checked={showReportedUsers}\n              onClick={handleClickShowReportedUsers}\n            >\n              <Text variant=\"red\">\n                <Trans>Show reported users</Trans>\n              </Text>\n            </FilterItem>\n          </MenuGroup>\n        </MenuList>\n      </Menu>\n      <FilterTags />\n    </Stack>\n  );\n};\n","import { Container, Divider, Flex } from '@chakra-ui/react';\nimport { useEffect, type FunctionComponent } from 'react';\n\nimport { UsersList } from '../features';\nimport { fetchAssertionsForAllAccounts } from '../features/account/assertions/api';\nimport { fetchTrustScoreForAllAccounts } from '../features/account/trust-score/api';\nimport { Filter } from '../features/users/filter';\nimport { useDispatch } from '../hooks';\n\nconst CommunityPage: FunctionComponent = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchTrustScoreForAllAccounts()).catch((error) =>\n      console.log(error),\n    );\n    dispatch(fetchAssertionsForAllAccounts()).catch((error) =>\n      console.log(error),\n    );\n  }, [dispatch]);\n\n  return (\n    <Container maxWidth=\"container.xl\" paddingTop=\"0\" marginTop={20}>\n      <Flex direction=\"row\" marginBottom={{ base: 4, md: 6 }} gap=\"2\">\n        <Filter />\n      </Flex>\n\n      <Divider my=\"8\" />\n\n      <UsersList />\n    </Container>\n  );\n};\n\nexport default CommunityPage;\n"],"names":["FilterButton","forwardRef","props","ref","_jsx","IconButton","variant","isRound","i18n","_","id","height","icon","FilterIcon","width","flexShrink","FilterItem","_ref","children","checked","MenuItem","borderRadius","_jsxs","Stack","direction","alignItems","gap","CheckThinIcon","visibility","USER_CATEGORY_LABELS","UserCategory","Auditor","name","description","Builder","SecurityEngineer","SoftwareEngineer","FilterCategory","category","dispatch","useDispatch","useSelector","getCategory","onClick","handleClick","toggleCategory","Text","Trans","Box","flexGrow","FilterTag","_USER_CATEGORY_LABELS","Tag","TagLabel","message","CloseIcon","cursor","marginLeft","FilterTags","address","connectedAddress","isConnected","useAccount","categories","getCategories","endorsedByYou","getEndorsedByYou","reportedByYou","getReportedByYou","showReportedUsers","getShowReportedUsers","useEffect","fetchUsers","userId","undefined","catch","console","error","handleCategoryClick","_Fragment","background","color","handleClickEndorsedByYou","toggleEndorsedByYou","handleClickReportedByYou","toggleReportedByYou","map","handleClickShowReportedUsers","toggleShowReportedUsers","Filter","spacing","flexWrap","Menu","closeOnSelect","isLazy","MenuButton","as","MenuList","boxShadow","MenuGroup","title","Divider","borderColor","Object","entries","CommunityPage","fetchTrustScoreForAllAccounts","log","fetchAssertionsForAllAccounts","Container","maxWidth","paddingTop","marginTop","Flex","marginBottom","base","md","my","UsersList"],"sourceRoot":""}