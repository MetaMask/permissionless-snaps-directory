{"version":3,"file":"component---src-pages-snap-snap-location-snap-slug-tsx-37f77bf2b2dbcd31ac9c.js","mappings":"iZAkBO,MAAMA,EAA6DC,IAMnE,IANoE,SACzEC,EAAQ,QACRC,EAAO,OACPC,EAAM,QACNC,EAAO,OACPC,GACDL,EACC,MAAM,EAACM,EAAU,EAACC,IAAgBC,EAAAA,EAAAA,WAAS,IACrC,EAACC,EAAgB,EAACC,IAAsBF,EAAAA,EAAAA,UAAS,IAUvD,OACEG,EAAAA,EAAAA,KAACC,EAAAA,GAAgB,CACfP,OAAQA,EACRC,UAAWA,EACXO,KAAK,WACLC,YAAYH,EAAAA,EAAAA,KAACI,EAAAA,EAAoB,IACjCC,WAAUC,EAAAA,GAAAC,EAAE,CAAAC,GAAA,WACZf,QAASA,EACTgB,kBAhBsBA,KACxBb,GAAa,GAEbJ,EAAOM,GAAiBY,SAAQ,KAC9Bd,GAAa,EAAM,GACnB,EAWqCe,UAErCX,EAAAA,EAAAA,KAACY,EAAAA,EAAM,CAAAD,UACLE,EAAAA,EAAAA,MAACC,EAAAA,EAAM,CAACC,UAAU,SAAQJ,SAAA,EACxBX,EAAAA,EAAAA,KAACgB,EAAAA,EAAI,CAACC,SAAS,KAAKC,WAAW,OAAMP,UACnCX,EAAAA,EAAAA,KAAAmB,EAAAA,GAAA,CAAAX,GAAA,SAAAY,OAAA,CAAA9B,SAGKA,GAAQ+B,WAAA,IADXrB,EAAAA,EAAAA,KAACgB,EAAAA,EAAI,CAACM,QAAQ,OAAOC,GAAG,eAM5BV,EAAAA,EAAAA,MAACG,EAAAA,EAAI,CAACC,SAAS,KAAKO,UAAW,EAAGD,GAAG,OAAMZ,SAAA,EACzCX,EAAAA,EAAAA,KAAAmB,EAAAA,GAAA,CAAAX,GAAA,YAGAR,EAAAA,EAAAA,KAACyB,EAAAA,EAAI,CAAAd,UACHX,EAAAA,EAAAA,KAAAmB,EAAAA,GAAA,CAAAX,GAAA,iBAGJR,EAAAA,EAAAA,KAAC0B,EAAAA,GAAuB,CACtBnC,QAASA,EACToC,SAAWP,IACTrB,EACER,EAAQqC,QAAO,CAACrB,EAAGsB,KAA4B,IAAlBT,EAAOS,KACrC,UAKQ,E,gDCvDhB,MAAMC,EAAmDzC,IAIzD,IAJ0D,QAC/D0C,EAAO,aACPC,EAAY,SACZ1C,GACDD,EACC,MAAM,EAAC4C,EAAU,EAACC,IAAgBrC,EAAAA,EAAAA,WAAS,GAErCsC,GAAWC,EAAAA,EAAAA,OAEX,eAAEC,EAAc,aAAEC,IAAiBC,EAAAA,EAAAA,MAEnC,YAAEC,EAAW,UAAEC,EAAS,cAAEC,IAAkBC,EAAAA,EAAAA,OAElDC,EAAAA,EAAAA,GAAoBH,GAIpB,MAAMlD,EAAU,CAAAe,EAAAA,GAAAC,EAAC,CAAAC,GAAA,WAAuBF,EAAAA,GAAAC,EAAE,CAAAC,GAAA,WAASF,EAAAA,GAAAC,EAAE,CAAAC,GAAA,YA0CrD,OACEK,EAAAA,EAAAA,MAAAgC,EAAAA,SAAA,CAAAlC,SAAA,EACEX,EAAAA,EAAAA,KAAC8C,EAAAA,GAAa,CACZC,QAASA,IAAMb,GAAa,GAC5Bc,UAAU,EACVC,KAAK,OAENhB,IACCjC,EAAAA,EAAAA,KAACZ,EAAgB,CACfE,SAAUA,EACVC,QAASA,EACTG,OAAQuC,EACRxC,QAASA,IAAMyC,GAAa,GAC5B1C,OArDO0D,UACb,MAAMC,EAAuBT,EAAcU,qBACzCrB,EACAC,EACAqB,GAGIC,QAAkBd,EAAYW,GACpC,GAAIG,EAAW,CACb,MAAMC,EAAYb,EAAcc,mBAC9BL,EACAG,GAEFnB,GAASsB,EAAAA,EAAAA,GAAoBF,IAC1BG,MAAMC,IACDA,EAAOC,KAAKC,SAAS,cACvB1B,GAAS2B,EAAAA,EAAAA,GAA6B9B,IAAe+B,OAClDC,GAAUC,QAAQC,IAAIF,KAEzB3B,EAAe,CACb8B,MAAK7D,EAAAA,GAAAC,EAAE,CAAAC,GAAA,WACP4D,YAAW9D,EAAAA,GAAAC,EAAE,CAAAC,GAAA,SAAAY,OAAA,CAAA9B,SAAIA,QAGnBgD,EAAa,CACX6B,MAAK7D,EAAAA,GAAAC,EAAE,CAAAC,GAAA,WACP4D,YAAW9D,EAAAA,GAAAC,EAAE,CAAAC,GAAA,SAAAY,OAAA,CAAA9B,SAAqCA,MAEtD,IAEDyE,OAAM,KACLzB,EAAa,CACX6B,MAAK7D,EAAAA,GAAAC,EAAE,CAAAC,GAAA,WACP4D,YAAW9D,EAAAA,GAAAC,EAAE,CAAAC,GAAA,SAAAY,OAAA,CAAA9B,SAAqCA,MAClD,GAER,CACA4C,GAAa,EAAM,MAmBhB,EC7EMmC,EAA2DhF,IAMjE,IANkE,SACvEC,EAAQ,QACRC,EAAO,OACPC,EAAM,QACNC,EAAO,OACPC,GACDL,EACC,MAAM,EAACM,EAAU,EAACC,IAAgBC,EAAAA,EAAAA,WAAS,IACrC,EAACC,EAAgB,EAACC,IAAsBF,EAAAA,EAAAA,UAAS,IAUvD,OACEG,EAAAA,EAAAA,KAACC,EAAAA,GAAgB,CACfP,OAAQA,EACRC,UAAWA,EACXO,KAAK,WACLC,YAAYH,EAAAA,EAAAA,KAACsE,EAAAA,GAAe,IAC5BjE,WAAUC,EAAAA,GAAAC,EAAE,CAAAC,GAAA,WACZf,QAASA,EACTgB,kBAhBsBA,KACxBb,GAAa,GAEbJ,EAAOM,GAAiBY,SAAQ,KAC9Bd,GAAa,EAAM,GACnB,EAWqCe,UAErCX,EAAAA,EAAAA,KAACY,EAAAA,EAAM,CAAAD,UACLE,EAAAA,EAAAA,MAACC,EAAAA,EAAM,CAACC,UAAU,SAAQJ,SAAA,EACxBX,EAAAA,EAAAA,KAACgB,EAAAA,EAAI,CAACC,SAAS,KAAKC,WAAW,OAAMP,UACnCX,EAAAA,EAAAA,KAAAmB,EAAAA,GAAA,CAAAX,GAAA,SAAAY,OAAA,CAAA9B,SAGKA,GAAQ+B,WAAA,IADXrB,EAAAA,EAAAA,KAACgB,EAAAA,EAAI,CAACM,QAAQ,OAAOC,GAAG,eAO5BV,EAAAA,EAAAA,MAACG,EAAAA,EAAI,CAACC,SAAS,KAAKO,UAAW,EAAGD,GAAG,OAAMZ,SAAA,EACzCX,EAAAA,EAAAA,KAAAmB,EAAAA,GAAA,CAAAX,GAAA,YAGAR,EAAAA,EAAAA,KAACyB,EAAAA,EAAI,CAAAd,UACHX,EAAAA,EAAAA,KAAAmB,EAAAA,GAAA,CAAAX,GAAA,iBAGJR,EAAAA,EAAAA,KAAC0B,EAAAA,GAAuB,CACtBnC,QAASA,EACToC,SAAWP,IACTrB,EACER,EAAQqC,QAAO,CAACrB,EAAGsB,KAA4B,IAAlBT,EAAOS,KACrC,UAKQ,ECxDV0C,EAAiDlF,IAIvD,IAJwD,QAC7D0C,EAAO,aACPC,EAAY,SACZ1C,GACDD,EACC,MAAM,EAAC4C,EAAU,EAACC,IAAgBrC,EAAAA,EAAAA,WAAS,GAErCsC,GAAWC,EAAAA,EAAAA,OAEX,eAAEC,EAAc,aAAEC,IAAiBC,EAAAA,EAAAA,MAEnC,YAAEC,EAAW,UAAEC,EAAS,cAAEC,IAAkBC,EAAAA,EAAAA,OAElDC,EAAAA,EAAAA,GAAoBH,GAIpB,MAAMlD,EAAU,CAAAe,EAAAA,GAAAC,EAAC,CAAAC,GAAA,WAAOF,EAAAA,GAAAC,EAAE,CAAAC,GAAA,YAuC1B,OACEK,EAAAA,EAAAA,MAAAgC,EAAAA,SAAA,CAAAlC,SAAA,EACEX,EAAAA,EAAAA,KAACwE,EAAAA,GAAY,CACXzB,QAASA,IAAMb,GAAa,GAC5BuC,UAAU,EACVxB,KAAK,OAENhB,IACCjC,EAAAA,EAAAA,KAACqE,EAAe,CACd/E,SAAUA,EACVC,QAASA,EACTG,OAAQuC,EACRxC,QAASA,IAAMyC,GAAa,GAC5B1C,OAlDO0D,UACb,MAAMwB,EAAKhC,EAAciC,qBACvB5C,EACAC,EACAqB,GAGIC,QAAkBd,EAAYkC,GACpC,GAAIpB,EAAW,CACb,MAAMC,EAAYb,EAAcc,mBAAmBkB,EAAIpB,GACvDnB,GAASsB,EAAAA,EAAAA,GAAoBF,IAC1BG,MAAKR,UACAS,EAAOC,KAAKC,SAAS,cACvB1B,GAAS2B,EAAAA,EAAAA,GAA6B9B,IAAe+B,OAClDC,GAAUC,QAAQC,IAAIF,KAEzB3B,EAAe,CACb8B,MAAK7D,EAAAA,GAAAC,EAAE,CAAAC,GAAA,WACP4D,YAAW9D,EAAAA,GAAAC,EAAE,CAAAC,GAAA,SAAAY,OAAA,CAAA9B,SAAIA,QAGnBgD,EAAa,CACX6B,MAAK7D,EAAAA,GAAAC,EAAE,CAAAC,GAAA,WACP4D,YAAW9D,EAAAA,GAAAC,EAAE,CAAAC,GAAA,SAAAY,OAAA,CAAA9B,SAAgCA,MAEjD,IAEDyE,OAAM,KACLzB,EAAa,CACX6B,MAAK7D,EAAAA,GAAAC,EAAE,CAAAC,GAAA,WACP4D,YAAW9D,EAAAA,GAAAC,EAAE,CAAAC,GAAA,SAAAY,OAAA,CAAA9B,SAAgCA,MAC7C,GAER,CACA4C,GAAa,EAAM,MAmBhB,EC0EM0C,EAAqCC,IAAc,IAAb,KAAEC,GAAMD,EACzD,MAAMV,EAAWW,EAAKC,KAAKC,KAAI,mCACzBZ,EAAc,uCAAuCU,EAAKC,KAAKC,KAAI,IACnEC,EAAQ,GAAGH,EAAKI,KAAKC,aAAaC,QAAUN,EAAKC,KAAKM,OAAOC,UAEnE,OACEzE,EAAAA,EAAAA,MAAAgC,EAAAA,SAAA,CAAAlC,SAAA,EACEX,EAAAA,EAAAA,KAAA,QAAMuF,KAAK,QACXvF,EAAAA,EAAAA,KAAA,SAAAW,SAAQwD,KACRnE,EAAAA,EAAAA,KAAA,QAAMgF,KAAK,cAAcQ,QAASpB,KAClCpE,EAAAA,EAAAA,KAAA,QAAMyF,SAAS,WAAWD,QAASV,EAAKC,KAAKC,QAC7ChF,EAAAA,EAAAA,KAAA,QAAMyF,SAAS,eAAeD,QAASV,EAAKI,KAAKC,aAAahB,SAC9DnE,EAAAA,EAAAA,KAAA,QAAMyF,SAAS,iBAAiBD,QAASpB,KACzCpE,EAAAA,EAAAA,KAAA,QAAMyF,SAAS,UAAUD,QAAQ,aACjCxF,EAAAA,EAAAA,KAAA,QAAMgF,KAAK,WAAWQ,QAASP,KAC/BjF,EAAAA,EAAAA,KAAA,QAAMgF,KAAK,iBAAiBQ,QAAQ,UACpCxF,EAAAA,EAAAA,KAAA,QAAMgF,KAAK,kBAAkBQ,QAAQ,SACrCxF,EAAAA,EAAAA,KAAA,QAAMgF,KAAK,eAAeQ,QAAQ,yBAClCxF,EAAAA,EAAAA,KAAA,QAAMgF,KAAK,kBAAkBQ,QAASV,EAAKI,KAAKC,aAAaO,UAC7D1F,EAAAA,EAAAA,KAAA,QAAMgF,KAAK,gBAAgBQ,QAASV,EAAKC,KAAKC,QAC9ChF,EAAAA,EAAAA,KAAA,QAAMgF,KAAK,sBAAsBQ,QAASpB,KAC1CpE,EAAAA,EAAAA,KAAA,QAAMgF,KAAK,gBAAgBQ,QAASP,MACnC,EAiDP,MAnMmD5F,IAAc,IAAb,KAAEyF,GAAMzF,EAC1D,MAAM,KACJ2F,EAAI,OACJW,EAAM,KACNC,EAAI,QACJC,EAAO,QACPC,EAAO,YACP1B,EAAW,cACX2B,EAAa,eACbC,EAAc,SACdC,GACEnB,EAAKC,MAEDD,KAAMoB,IAAmBC,EAAAA,EAAAA,MAC3BC,EAAcC,QAAQH,aAAc,EAAdA,EAAiBP,KACvC,QAAE5D,EAAO,YAAEuE,IAAgBC,EAAAA,EAAAA,MAEjC,OACE1F,EAAAA,EAAAA,MAAC2F,EAAAA,GAAG,CAACC,SAAS,WAAU9F,SAAA,EACtBX,EAAAA,EAAAA,KAACwG,EAAAA,GAAG,CACFE,cAAc,OACdD,SAAS,WACTE,IAAI,OACJC,MAAM,OACNC,OAAO,MACPC,GAAI,CACFC,WAAY,QAAQnB,EAAI,6BACxBoB,eAAgB,QAChBpF,OAAQ,2BACRqF,QAAS,WAGbpG,EAAAA,EAAAA,MAACqG,EAAAA,EAAS,CAACC,SAAS,eAAeC,WAAW,IAAIC,UAAU,KAAI1G,SAAA,EAC9DX,EAAAA,EAAAA,KAACsH,EAAAA,GAAwB,CAAC3B,OAAQA,EAAQ4B,QAASxB,KACnDlF,EAAAA,EAAAA,MAAC2G,EAAAA,EAAI,CACHC,cAAe,CAAC,SAAU,KAAM,OAChCC,eAAe,gBACfC,WAAW,SACXC,IAAI,IAAGjH,SAAA,EAEPX,EAAAA,EAAAA,KAAC6H,EAAAA,GAAU,CAAC7C,KAAMA,EAAMY,KAAMA,EAAMD,OAAQA,KAC5C9E,EAAAA,EAAAA,MAAC2G,EAAAA,EAAI,CAACG,WAAW,SAASC,IAAI,IAAIhB,MAAO,CAAC,OAAQ,KAAM,QAAQjG,SAAA,CAC7D2F,GAAevE,IACd/B,EAAAA,EAAAA,KAACuE,EAAU,CACTjF,SAAU0F,EACVhD,aAAcgE,EACdjE,QAASA,IAGZuE,GAAevE,IACd/B,EAAAA,EAAAA,KAAC8B,EAAW,CACVxC,SAAU0F,EACVhD,aAAcgE,EACdjE,QAASA,KAGX+D,IACA9F,EAAAA,EAAAA,KAAC8H,EAAAA,GAAiB,CAChBnC,OAAQA,EACRX,KAAMA,EACNY,KAAMA,EACNC,QAASA,EACT0B,QAASxB,KAGXK,GAAeN,IAAYD,IAC3B7F,EAAAA,EAAAA,KAAC+H,EAAAA,GAAiB,CAACpC,OAAQA,EAAQE,QAASA,WAKlD7F,EAAAA,EAAAA,KAACgI,EAAAA,EAAO,CAACC,QAAQ,OACjBjI,EAAAA,EAAAA,KAACkI,EAAAA,GAAQ,CAACnD,KAAMD,EAAKC,QAErB/E,EAAAA,EAAAA,KAACgB,EAAAA,EAAI,CACHmH,MAAM,mBACNC,cAAc,YACdlH,WAAW,SACXD,SAAS,KAAIN,UAEbX,EAAAA,EAAAA,KAAAmB,EAAAA,GAAA,CAAAX,GAAA,SAAAY,OAAA,CAAA4D,KASKA,GAAI3D,WAAA,IAPPrB,EAAAA,EAAAA,KAACgB,EAAAA,EAAI,CACHO,GAAG,OACH4G,MAAM,eACNC,cAAc,YACdlH,WAAW,SACXD,SAAS,aAMfjB,EAAAA,EAAAA,KAACqI,EAAAA,GAAW,CACVjE,YAAaA,EACbiD,UAAU,IACViB,WAAW,aAGZrC,IACCpF,EAAAA,EAAAA,MAAAgC,EAAAA,SAAA,CAAAlC,SAAA,EACEX,EAAAA,EAAAA,KAACgI,EAAAA,EAAO,CAACO,GAAG,QACZvI,EAAAA,EAAAA,KAACwI,EAAAA,GAAY,CACX7C,OAAQA,EACRM,SAAUA,YAKd,C","sources":["webpack://@metamask/snaps-directory/./src/features/snap/components/modals/EndorseSnapModal.tsx","webpack://@metamask/snaps-directory/./src/features/snap/components/EndorseSnap.tsx","webpack://@metamask/snaps-directory/./src/features/snap/components/modals/ReportSnapModal.tsx","webpack://@metamask/snaps-directory/./src/features/snap/components/ReportSnap.tsx","webpack://@metamask/snaps-directory/./src/pages/snap/{Snap.location}/{Snap.slug}.tsx"],"sourcesContent":["import { Center, Link, Text, VStack } from '@chakra-ui/react';\nimport { Trans, t } from '@lingui/macro';\nimport { useState, type FunctionComponent } from 'react';\n\nimport {\n  MultipleCheckboxOptions,\n  RequestSignModal,\n  StarFilledShadowIcon,\n} from '../../../../components';\n\nexport type EndorseSnapModalProps = {\n  snapName: string;\n  options: string[];\n  onSign: (arg: string[]) => Promise<void>;\n  onClose: () => void;\n  isOpen: boolean;\n};\n\nexport const EndorseSnapModal: FunctionComponent<EndorseSnapModalProps> = ({\n  snapName,\n  options,\n  onSign,\n  onClose,\n  isOpen,\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedOptions, setSelectedOptions] = useState([] as string[]);\n\n  const onSignButtonClick = () => {\n    setIsLoading(true);\n\n    onSign(selectedOptions).finally(() => {\n      setIsLoading(false);\n    });\n  };\n\n  return (\n    <RequestSignModal\n      isOpen={isOpen}\n      isLoading={isLoading}\n      mode=\"positive\"\n      headerIcon={<StarFilledShadowIcon />}\n      buttonText={t`Sign to endorse`}\n      onClose={onClose}\n      onSignButtonClick={onSignButtonClick}\n    >\n      <Center>\n        <VStack textAlign=\"center\">\n          <Text fontSize=\"md\" fontWeight=\"bold\">\n            <Trans>\n              Endorse{' '}\n              <Text variant=\"blue\" as=\"span\">\n                {snapName}\n              </Text>{' '}\n            </Trans>\n          </Text>\n\n          <Text fontSize=\"sm\" noOfLines={2} as=\"span\">\n            <Trans>\n              This action will endorse the snap as secure in your community.\n            </Trans>\n            <Link>\n              <Trans>Learn more</Trans>\n            </Link>\n          </Text>\n          <MultipleCheckboxOptions\n            options={options}\n            onChange={(values) => {\n              setSelectedOptions(\n                options.filter((_, index) => values[index] === true),\n              );\n            }}\n          />\n        </VStack>\n      </Center>\n    </RequestSignModal>\n  );\n};\n","import { t } from '@lingui/macro';\nimport type { Hex } from '@metamask/utils';\nimport { useState, type FunctionComponent } from 'react';\n\nimport { EndorseSnapModal } from './modals/EndorseSnapModal';\nimport { EndorseButton } from '../../../components';\nimport { useDispatch, useVerifiableCredential } from '../../../hooks';\nimport { useSignErrorHandler } from '../../../hooks/useSignErrorHandler';\nimport useToastMsg from '../../../hooks/useToastMsg';\nimport {\n  createSnapAssertion,\n  fetchSnapAssertionsForSnapId,\n} from '../assertions/api';\n\ntype EndorseSnapProps = {\n  address: Hex;\n  snapChecksum: string;\n  snapName: string;\n};\n\nexport const EndorseSnap: FunctionComponent<EndorseSnapProps> = ({\n  address,\n  snapChecksum,\n  snapName,\n}) => {\n  const [showModal, setShowModal] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const { showSuccessMsg, showErrorMsg } = useToastMsg();\n\n  const { signMessage, signError, snapVCBuilder } = useVerifiableCredential();\n\n  useSignErrorHandler(signError);\n\n  // TODO: hardcode options for now, change to dynamic if needed,\n  // TODO may need to consider change options to key value pair to support i18n, key to stored in DB, value is localized string shown in UI.\n  const options = [t`Good user experience`, t`Useful`, t`Seems secure`];\n\n  const onSign = async (selected: string[]) => {\n    const verifiableCredential = snapVCBuilder.buildEndorsedPayload(\n      address,\n      snapChecksum,\n      selected,\n    );\n\n    const signature = await signMessage(verifiableCredential);\n    if (signature) {\n      const assertion = snapVCBuilder.getSignedAssertion(\n        verifiableCredential,\n        signature,\n      );\n      dispatch(createSnapAssertion(assertion))\n        .then((action) => {\n          if (action.type.endsWith('fulfilled')) {\n            dispatch(fetchSnapAssertionsForSnapId(snapChecksum)).catch(\n              (error) => console.log(error),\n            );\n            showSuccessMsg({\n              title: t`Success`,\n              description: t`${snapName} has been endorsed.`,\n            });\n          } else {\n            showErrorMsg({\n              title: t`Error`,\n              description: t`Failed to create endorsement for ${snapName}.`,\n            });\n          }\n        })\n        .catch(() => {\n          showErrorMsg({\n            title: t`Error`,\n            description: t`Failed to create endorsement for ${snapName}.`,\n          });\n        });\n    }\n    setShowModal(false);\n  };\n\n  return (\n    <>\n      <EndorseButton\n        onClick={() => setShowModal(true)}\n        endorsed={false}\n        size=\"lg\"\n      />\n      {showModal && (\n        <EndorseSnapModal\n          snapName={snapName}\n          options={options}\n          isOpen={showModal}\n          onClose={() => setShowModal(false)}\n          onSign={onSign}\n        />\n      )}\n    </>\n  );\n};\n","import { Center, Link, Text, VStack } from '@chakra-ui/react';\nimport { Trans, t } from '@lingui/macro';\nimport { useState, type FunctionComponent } from 'react';\n\nimport {\n  MultipleCheckboxOptions,\n  QuestionRedIcon,\n  RequestSignModal,\n} from '../../../../components';\n\nexport type ReportSnapModalProps = {\n  snapName: string;\n  options: string[];\n  onSign: (arg: string[]) => Promise<void>;\n  onClose: () => void;\n  isOpen: boolean;\n};\n\nexport const ReportSnapModal: FunctionComponent<ReportSnapModalProps> = ({\n  snapName,\n  options,\n  onSign,\n  onClose,\n  isOpen,\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedOptions, setSelectedOptions] = useState([] as string[]);\n\n  const onSignButtonClick = () => {\n    setIsLoading(true);\n\n    onSign(selectedOptions).finally(() => {\n      setIsLoading(false);\n    });\n  };\n\n  return (\n    <RequestSignModal\n      isOpen={isOpen}\n      isLoading={isLoading}\n      mode=\"negative\"\n      headerIcon={<QuestionRedIcon />}\n      buttonText={t`Sign to report`}\n      onClose={onClose}\n      onSignButtonClick={onSignButtonClick}\n    >\n      <Center>\n        <VStack textAlign=\"center\">\n          <Text fontSize=\"md\" fontWeight=\"bold\">\n            <Trans>\n              Report for{' '}\n              <Text variant=\"blue\" as=\"span\">\n                {snapName}\n              </Text>{' '}\n              as a malicious snap\n            </Trans>\n          </Text>\n\n          <Text fontSize=\"sm\" noOfLines={2} as=\"span\">\n            <Trans>\n              This action will flag the snap as a malicious in your community.\n            </Trans>\n            <Link>\n              <Trans>Learn more</Trans>\n            </Link>\n          </Text>\n          <MultipleCheckboxOptions\n            options={options}\n            onChange={(values) => {\n              setSelectedOptions(\n                options.filter((_, index) => values[index] === true),\n              );\n            }}\n          />\n        </VStack>\n      </Center>\n    </RequestSignModal>\n  );\n};\n","import { t } from '@lingui/macro';\nimport type { Hex } from '@metamask/utils';\nimport { useState, type FunctionComponent } from 'react';\n\nimport { ReportSnapModal } from './modals/ReportSnapModal';\nimport { ReportButton } from '../../../components';\nimport { useDispatch, useVerifiableCredential } from '../../../hooks';\nimport { useSignErrorHandler } from '../../../hooks/useSignErrorHandler';\nimport useToastMsg from '../../../hooks/useToastMsg';\nimport {\n  createSnapAssertion,\n  fetchSnapAssertionsForSnapId,\n} from '../assertions/api';\n\ntype ReportSnapProps = {\n  address: Hex;\n  snapChecksum: string;\n  snapName: string;\n};\n\nexport const ReportSnap: FunctionComponent<ReportSnapProps> = ({\n  address,\n  snapChecksum,\n  snapName,\n}) => {\n  const [showModal, setShowModal] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const { showSuccessMsg, showErrorMsg } = useToastMsg();\n\n  const { signMessage, signError, snapVCBuilder } = useVerifiableCredential();\n\n  useSignErrorHandler(signError);\n\n  // TODO: hardcode options for now, change to dynamic if needed,\n  // TODO may need to consider change options to key value pair to support i18n, key to stored in DB, value is localized string shown in UI.\n  const options = [t`Scam`, t`Vulnerable`];\n\n  const onSign = async (selected: string[]) => {\n    const VC = snapVCBuilder.buildDisputedPayload(\n      address,\n      snapChecksum,\n      selected,\n    );\n\n    const signature = await signMessage(VC);\n    if (signature) {\n      const assertion = snapVCBuilder.getSignedAssertion(VC, signature);\n      dispatch(createSnapAssertion(assertion))\n        .then(async (action) => {\n          if (action.type.endsWith('fulfilled')) {\n            dispatch(fetchSnapAssertionsForSnapId(snapChecksum)).catch(\n              (error) => console.log(error),\n            );\n            showSuccessMsg({\n              title: t`Success`,\n              description: t`${snapName} has been reported.`,\n            });\n          } else {\n            showErrorMsg({\n              title: t`Error`,\n              description: t`Failed to create report for ${snapName}.`,\n            });\n          }\n        })\n        .catch(() => {\n          showErrorMsg({\n            title: t`Error`,\n            description: t`Failed to create report for ${snapName}.`,\n          });\n        });\n    }\n    setShowModal(false);\n  };\n\n  return (\n    <>\n      <ReportButton\n        onClick={() => setShowModal(true)}\n        reported={false}\n        size=\"lg\"\n      />\n      {showModal && (\n        <ReportSnapModal\n          snapName={snapName}\n          options={options}\n          isOpen={showModal}\n          onClose={() => setShowModal(false)}\n          onSign={onSign}\n        />\n      )}\n    </>\n  );\n};\n","import { Box, Container, Divider, Flex, Text } from '@chakra-ui/react';\nimport { Trans } from '@lingui/macro';\nimport { graphql } from 'gatsby';\nimport { type FunctionComponent } from 'react';\nimport { useAccount } from 'wagmi';\n\nimport { InstallSnapButton, SnapWebsiteButton } from '../../../components';\nimport { type RegistrySnapCategory } from '../../../constants';\nimport {\n  Authorship,\n  Description,\n  Metadata,\n  RelatedSnaps,\n  useGetInstalledSnapsQuery,\n} from '../../../features';\nimport { NotificationAcknowledger } from '../../../features/notifications/components';\nimport { EndorseSnap } from '../../../features/snap/components/EndorseSnap';\nimport { ReportSnap } from '../../../features/snap/components/ReportSnap';\nimport type { Fields } from '../../../utils';\n\ntype SnapPageProps = {\n  data: {\n    snap: Fields<\n      Queries.Snap,\n      | 'name'\n      | 'icon'\n      | 'snapId'\n      | 'description'\n      | 'latestVersion'\n      | 'latestChecksum'\n      | 'website'\n      | 'onboard'\n      | 'category'\n      | 'author'\n      | 'sourceCode'\n      | 'audits'\n      | 'banner'\n      | 'support'\n    >;\n  };\n};\n\nconst SnapPage: FunctionComponent<SnapPageProps> = ({ data }) => {\n  const {\n    name,\n    snapId,\n    icon,\n    website,\n    onboard,\n    description,\n    latestVersion,\n    latestChecksum,\n    category,\n  } = data.snap;\n\n  const { data: installedSnaps } = useGetInstalledSnapsQuery();\n  const isInstalled = Boolean(installedSnaps?.[snapId]);\n  const { address, isConnected } = useAccount();\n\n  return (\n    <Box position=\"relative\">\n      <Box\n        pointerEvents=\"none\"\n        position=\"absolute\"\n        top=\"-50%\"\n        width=\"100%\"\n        height=\"75%\"\n        sx={{\n          background: `url(\"${icon}\") no-repeat center center`,\n          backgroundSize: 'cover',\n          filter: 'blur(96px) saturate(1.2)',\n          opacity: '0.25',\n        }}\n      />\n      <Container maxWidth=\"container.xl\" paddingTop=\"0\" marginTop=\"20\">\n        <NotificationAcknowledger snapId={snapId} version={latestVersion} />\n        <Flex\n          flexDirection={['column', null, 'row']}\n          justifyContent=\"space-between\"\n          alignItems=\"center\"\n          gap=\"6\"\n        >\n          <Authorship name={name} icon={icon} snapId={snapId} />\n          <Flex alignItems=\"center\" gap=\"4\" width={['100%', null, 'auto']}>\n            {isConnected && address && (\n              <ReportSnap\n                snapName={name}\n                snapChecksum={latestChecksum}\n                address={address}\n              />\n            )}\n            {isConnected && address && (\n              <EndorseSnap\n                snapName={name}\n                snapChecksum={latestChecksum}\n                address={address}\n              />\n            )}\n            {!onboard && (\n              <InstallSnapButton\n                snapId={snapId}\n                name={name}\n                icon={icon}\n                website={website}\n                version={latestVersion}\n              />\n            )}\n            {(isInstalled || onboard) && website && (\n              <SnapWebsiteButton snapId={snapId} website={website} />\n            )}\n          </Flex>\n        </Flex>\n\n        <Divider marginY=\"6\" />\n        <Metadata snap={data.snap} />\n\n        <Text\n          color=\"text.alternative\"\n          textTransform=\"uppercase\"\n          fontWeight=\"medium\"\n          fontSize=\"sm\"\n        >\n          <Trans>\n            Description by{' '}\n            <Text\n              as=\"span\"\n              color=\"text.default\"\n              textTransform=\"uppercase\"\n              fontWeight=\"medium\"\n              fontSize=\"sm\"\n            >\n              {name}\n            </Text>\n          </Trans>\n        </Text>\n        <Description\n          description={description}\n          marginTop=\"2\"\n          whiteSpace=\"pre-wrap\"\n        />\n\n        {category && (\n          <>\n            <Divider my=\"12\" />\n            <RelatedSnaps\n              snapId={snapId}\n              category={category as RegistrySnapCategory}\n            />\n          </>\n        )}\n      </Container>\n    </Box>\n  );\n};\n\ntype HeadProps = SnapPageProps & {\n  data: {\n    site: {\n      siteMetadata: Fields<\n        Queries.SiteSiteMetadata,\n        'title' | 'description' | 'author' | 'siteUrl'\n      >;\n    };\n  };\n};\n\nexport const Head: FunctionComponent<HeadProps> = ({ data }) => {\n  const title = `${data.snap.name} on the MetaMask Snaps Directory`;\n  const description = `Customize your web3 experience with ${data.snap.name}.`;\n  const image = `${data.site.siteMetadata.siteUrl}${data.snap.banner.publicURL}`;\n\n  return (\n    <>\n      <html lang=\"en\" />\n      <title>{title}</title>\n      <meta name=\"description\" content={description} />\n      <meta property=\"og:title\" content={data.snap.name} />\n      <meta property=\"og:site_name\" content={data.site.siteMetadata.title} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"og:image\" content={image} />\n      <meta name=\"og:image:width\" content=\"1200\" />\n      <meta name=\"og:image:height\" content=\"630\" />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:creator\" content={data.site.siteMetadata.author} />\n      <meta name=\"twitter:title\" content={data.snap.name} />\n      <meta name=\"twitter:description\" content={description} />\n      <meta name=\"twitter:image\" content={image} />\n    </>\n  );\n};\n\nexport const query = graphql`\n  query ($id: String) {\n    snap(id: { eq: $id }) {\n      name\n      snapId\n      icon\n      description {\n        description\n        trusted\n      }\n      latestVersion\n      latestChecksum\n      website\n      onboard\n      category\n      author {\n        name\n        website\n      }\n      sourceCode\n      audits {\n        auditor\n        report\n      }\n      banner {\n        publicURL\n      }\n      support {\n        contact\n        faq\n        knowledgeBase\n      }\n    }\n\n    site {\n      siteMetadata {\n        title\n        description\n        author\n        siteUrl\n      }\n    }\n  }\n`;\n\nexport default SnapPage;\n"],"names":["EndorseSnapModal","_ref","snapName","options","onSign","onClose","isOpen","isLoading","setIsLoading","useState","selectedOptions","setSelectedOptions","_jsx","RequestSignModal","mode","headerIcon","StarFilledShadowIcon","buttonText","i18n","_","id","onSignButtonClick","finally","children","Center","_jsxs","VStack","textAlign","Text","fontSize","fontWeight","Trans","values","components","variant","as","noOfLines","Link","MultipleCheckboxOptions","onChange","filter","index","EndorseSnap","address","snapChecksum","showModal","setShowModal","dispatch","useDispatch","showSuccessMsg","showErrorMsg","useToastMsg","signMessage","signError","snapVCBuilder","useVerifiableCredential","useSignErrorHandler","_Fragment","EndorseButton","onClick","endorsed","size","async","verifiableCredential","buildEndorsedPayload","selected","signature","assertion","getSignedAssertion","createSnapAssertion","then","action","type","endsWith","fetchSnapAssertionsForSnapId","catch","error","console","log","title","description","ReportSnapModal","QuestionRedIcon","ReportSnap","ReportButton","reported","VC","buildDisputedPayload","Head","_ref2","data","snap","name","image","site","siteMetadata","siteUrl","banner","publicURL","lang","content","property","author","snapId","icon","website","onboard","latestVersion","latestChecksum","category","installedSnaps","useGetInstalledSnapsQuery","isInstalled","Boolean","isConnected","useAccount","Box","position","pointerEvents","top","width","height","sx","background","backgroundSize","opacity","Container","maxWidth","paddingTop","marginTop","NotificationAcknowledger","version","Flex","flexDirection","justifyContent","alignItems","gap","Authorship","InstallSnapButton","SnapWebsiteButton","Divider","marginY","Metadata","color","textTransform","Description","whiteSpace","my","RelatedSnaps"],"sourceRoot":""}