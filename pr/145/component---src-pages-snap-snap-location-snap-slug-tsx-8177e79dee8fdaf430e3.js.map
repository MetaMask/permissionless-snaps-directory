{"version":3,"file":"component---src-pages-snap-snap-location-snap-slug-tsx-8177e79dee8fdaf430e3.js","mappings":"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","sources":["webpack://@metamask/snaps-directory/./node_modules/@chakra-ui/layout/dist/chunk-KTD65HY5.mjs","webpack://@metamask/snaps-directory/./src/features/snap/components/modals/EndorseSnapModal.tsx","webpack://@metamask/snaps-directory/./src/features/snap/components/EndorseSnap.tsx","webpack://@metamask/snaps-directory/./src/features/snap/components/modals/ReportSnapModal.tsx","webpack://@metamask/snaps-directory/./src/features/snap/components/ReportSnap.tsx","webpack://@metamask/snaps-directory/./src/pages/snap/{Snap.location}/{Snap.slug}.tsx"],"sourcesContent":["'use client'\n\n// src/stack/stack-divider.tsx\nimport { chakra } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar StackDivider = (props) => /* @__PURE__ */ jsx(\n  chakra.div,\n  {\n    className: \"chakra-stack__divider\",\n    ...props,\n    __css: {\n      ...props[\"__css\"],\n      borderWidth: 0,\n      alignSelf: \"stretch\",\n      borderColor: \"inherit\",\n      width: \"auto\",\n      height: \"auto\"\n    }\n  }\n);\nStackDivider.displayName = \"StackDivider\";\n\nexport {\n  StackDivider\n};\n//# sourceMappingURL=chunk-KTD65HY5.mjs.map","import { Center, Link, Text, VStack } from '@chakra-ui/react';\nimport { Trans, t } from '@lingui/macro';\nimport { useState, type FunctionComponent } from 'react';\n\nimport {\n  MultipleCheckboxOptions,\n  RequestSignModal,\n  StarFilledShadowIcon,\n} from '../../../../components';\n\nexport type EndorseSnapModalProps = {\n  snapName: string;\n  options: string[];\n  onSign: (arg: string[]) => Promise<void>;\n  onClose: () => void;\n  isOpen: boolean;\n};\n\nexport const EndorseSnapModal: FunctionComponent<EndorseSnapModalProps> = ({\n  snapName,\n  options,\n  onSign,\n  onClose,\n  isOpen,\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedOptions, setSelectedOptions] = useState([] as string[]);\n\n  const onSignButtonClick = () => {\n    setIsLoading(true);\n\n    onSign(selectedOptions).finally(() => {\n      setIsLoading(false);\n    });\n  };\n\n  return (\n    <RequestSignModal\n      isOpen={isOpen}\n      isLoading={isLoading}\n      mode=\"positive\"\n      headerIcon={<StarFilledShadowIcon fill=\"info.default\" />}\n      buttonText={t`Sign to endorse`}\n      onClose={onClose}\n      onSignButtonClick={onSignButtonClick}\n    >\n      <Center>\n        <VStack textAlign=\"center\" fontSize=\"md\">\n          <Text fontWeight=\"medium\">\n            <Trans>Endorse a Trustworthy Snap</Trans>\n          </Text>\n\n          <Text noOfLines={2} fontWeight=\"regular\" as=\"span\">\n            <Trans>\n              Sign to endorse{' '}\n              <Text variant=\"blue\" as=\"span\">\n                {snapName}\n              </Text>{' '}\n              as trustworthy for your community.\n            </Trans>{' '}\n            <Link\n              href=\"https://support.metamask.io/hc/en-us/articles/23263846792475\"\n              target=\"_blank\"\n            >\n              <Trans>Learn more</Trans>\n            </Link>\n          </Text>\n          <MultipleCheckboxOptions\n            options={options}\n            onChange={(values) => {\n              setSelectedOptions(\n                options.filter((_, index) => values[index] === true),\n              );\n            }}\n          />\n        </VStack>\n      </Center>\n    </RequestSignModal>\n  );\n};\n","import { t } from '@lingui/macro';\nimport type { Hex } from '@metamask/utils';\nimport { useState, type FunctionComponent, useEffect } from 'react';\n\nimport { EndorseSnapModal } from './modals/EndorseSnapModal';\nimport { EndorseButton } from '../../../components';\nimport {\n  useDispatch,\n  useSelector,\n  useVerifiableCredential,\n} from '../../../hooks';\nimport { useSignErrorHandler } from '../../../hooks/useSignErrorHandler';\nimport useToastMsg from '../../../hooks/useToastMsg';\nimport {\n  createSnapAssertion,\n  fetchSnapAssertionsForSnapId,\n} from '../assertions/api';\nimport {\n  getCurrentSnapStatusForIssuer,\n  isSnapEndorsedByIssuer,\n} from '../assertions/store';\n\ntype EndorseSnapProps = {\n  address: Hex;\n  snapChecksum: string;\n  snapName: string;\n};\n\nexport const EndorseSnap: FunctionComponent<EndorseSnapProps> = ({\n  address,\n  snapChecksum,\n  snapName,\n}) => {\n  const { signMessage, signError, snapVCBuilder } = useVerifiableCredential();\n\n  const issuer = snapVCBuilder.getIssuerDid(address);\n\n  const latestSnapStatus = useSelector(\n    getCurrentSnapStatusForIssuer(snapChecksum, issuer),\n  );\n\n  const isSnapEndorsed = useSelector(\n    isSnapEndorsedByIssuer(snapChecksum, issuer),\n  );\n\n  const [showModal, setShowModal] = useState(false);\n  const [endorsed, setEndorsed] = useState(isSnapEndorsed);\n\n  useEffect(() => {\n    setEndorsed(isSnapEndorsed);\n  }, [isSnapEndorsed]);\n\n  const dispatch = useDispatch();\n\n  const { showSuccessMsg, showErrorMsg } = useToastMsg();\n\n  useSignErrorHandler(signError);\n\n  // TODO: hardcode options for now, change to dynamic if needed,\n  // TODO may need to consider change options to key value pair to support i18n, key to stored in DB, value is localized string shown in UI.\n  const options = [t`Good user experience`, t`Useful`, t`Seems secure`];\n\n  const onSign = async (selected: string[]) => {\n    const verifiableCredential = snapVCBuilder.buildEndorsedPayload(\n      address,\n      snapChecksum,\n      selected,\n    );\n\n    const signature = await signMessage(verifiableCredential);\n    if (signature) {\n      const assertion = snapVCBuilder.getSignedAssertion(\n        verifiableCredential,\n        signature,\n      );\n      dispatch(createSnapAssertion(assertion))\n        .then((action) => {\n          if (action.type.endsWith('fulfilled')) {\n            dispatch(fetchSnapAssertionsForSnapId(snapChecksum)).catch(\n              (error) => console.log(error),\n            );\n            setEndorsed(true);\n            showSuccessMsg({\n              title: t`Success`,\n              description: t`${snapName} has been endorsed.`,\n            });\n          } else {\n            showErrorMsg({\n              title: t`Error`,\n              description: t`Failed to create endorsement for ${snapName}.`,\n            });\n          }\n        })\n        .catch(() => {\n          showErrorMsg({\n            title: t`Error`,\n            description: t`Failed to create endorsement for ${snapName}.`,\n          });\n        });\n    }\n    setShowModal(false);\n  };\n\n  return (\n    <>\n      <EndorseButton\n        onClick={() => setShowModal(true)}\n        endorsed={endorsed}\n        isDisabled={endorsed || latestSnapStatus !== null}\n      />\n      {showModal && (\n        <EndorseSnapModal\n          snapName={snapName}\n          options={options}\n          isOpen={showModal}\n          onClose={() => setShowModal(false)}\n          onSign={onSign}\n        />\n      )}\n    </>\n  );\n};\n","import { Center, Link, Text, VStack } from '@chakra-ui/react';\nimport { Trans, t } from '@lingui/macro';\nimport { useState, type FunctionComponent } from 'react';\n\nimport {\n  MultipleCheckboxOptions,\n  QuestionRedIcon,\n  RequestSignModal,\n} from '../../../../components';\n\nexport type ReportSnapModalProps = {\n  snapName: string;\n  options: string[];\n  onSign: (arg: string[]) => Promise<void>;\n  onClose: () => void;\n  isOpen: boolean;\n};\n\nexport const ReportSnapModal: FunctionComponent<ReportSnapModalProps> = ({\n  snapName,\n  options,\n  onSign,\n  onClose,\n  isOpen,\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedOptions, setSelectedOptions] = useState([] as string[]);\n\n  const onSignButtonClick = () => {\n    setIsLoading(true);\n\n    onSign(selectedOptions).finally(() => {\n      setIsLoading(false);\n    });\n  };\n\n  return (\n    <RequestSignModal\n      isOpen={isOpen}\n      isLoading={isLoading}\n      mode=\"negative\"\n      headerIcon={<QuestionRedIcon fill=\"error.default\" />}\n      buttonText={t`Sign to report`}\n      onClose={onClose}\n      onSignButtonClick={onSignButtonClick}\n    >\n      <Center>\n        <VStack textAlign=\"center\" fontSize=\"md\">\n          <Text fontWeight=\"medium\">\n            <Trans>Report an Untrustworthy Snap</Trans>\n          </Text>\n\n          <Text noOfLines={2} as=\"span\">\n            <Trans>\n              Sign to report{' '}\n              <Text variant=\"blue\" as=\"span\">\n                {snapName}\n              </Text>{' '}\n              as untrustworthy to safeguard your community.\n            </Trans>{' '}\n            <Link\n              href=\"https://support.metamask.io/hc/en-us/articles/23263846792475\"\n              target=\"_blank\"\n            >\n              <Trans>Learn more</Trans>\n            </Link>\n          </Text>\n          <MultipleCheckboxOptions\n            options={options}\n            onChange={(values) => {\n              setSelectedOptions(\n                options.filter((_, index) => values[index] === true),\n              );\n            }}\n          />\n        </VStack>\n      </Center>\n    </RequestSignModal>\n  );\n};\n","import { t } from '@lingui/macro';\nimport type { Hex } from '@metamask/utils';\nimport { useState, type FunctionComponent, useEffect } from 'react';\n\nimport { ReportSnapModal } from './modals/ReportSnapModal';\nimport { ReportButton } from '../../../components';\nimport {\n  useDispatch,\n  useSelector,\n  useVerifiableCredential,\n} from '../../../hooks';\nimport { useSignErrorHandler } from '../../../hooks/useSignErrorHandler';\nimport useToastMsg from '../../../hooks/useToastMsg';\nimport {\n  createSnapAssertion,\n  fetchSnapAssertionsForSnapId,\n} from '../assertions/api';\nimport {\n  getCurrentSnapStatusForIssuer,\n  isSnapReportedByIssuer,\n} from '../assertions/store';\nimport { SnapCurrentStatus } from '../assertions/types';\n\ntype ReportSnapProps = {\n  address: Hex;\n  snapChecksum: string;\n  snapName: string;\n};\n\nexport const ReportSnap: FunctionComponent<ReportSnapProps> = ({\n  address,\n  snapChecksum,\n  snapName,\n}) => {\n  const { signMessage, signError, snapVCBuilder } = useVerifiableCredential();\n\n  const issuer = snapVCBuilder.getIssuerDid(address);\n\n  const latestSnapStatus = useSelector(\n    getCurrentSnapStatusForIssuer(snapChecksum, issuer),\n  );\n\n  const isSnapReported = useSelector(\n    isSnapReportedByIssuer(snapChecksum, issuer),\n  );\n\n  const [showModal, setShowModal] = useState(false);\n  const [reported, setReported] = useState(isSnapReported);\n\n  useEffect(() => {\n    setReported(isSnapReported);\n  }, [isSnapReported]);\n\n  const dispatch = useDispatch();\n\n  const { showSuccessMsg, showErrorMsg } = useToastMsg();\n\n  useSignErrorHandler(signError);\n\n  // TODO: hardcode options for now, change to dynamic if needed,\n  // TODO may need to consider change options to key value pair to support i18n, key to stored in DB, value is localized string shown in UI.\n  const options = [t`Scam`, t`Vulnerable`];\n\n  const onSign = async (selected: string[]) => {\n    const VC = snapVCBuilder.buildDisputedPayload(\n      address,\n      snapChecksum,\n      selected,\n    );\n\n    const signature = await signMessage(VC);\n    if (signature) {\n      const assertion = snapVCBuilder.getSignedAssertion(VC, signature);\n      dispatch(createSnapAssertion(assertion))\n        .then(async (action) => {\n          if (action.type.endsWith('fulfilled')) {\n            dispatch(fetchSnapAssertionsForSnapId(snapChecksum)).catch(\n              (error) => console.log(error),\n            );\n            setReported(true);\n            showSuccessMsg({\n              title: t`Success`,\n              description: t`${snapName} has been reported.`,\n            });\n          } else {\n            showErrorMsg({\n              title: t`Error`,\n              description: t`Failed to create report for ${snapName}.`,\n            });\n          }\n        })\n        .catch(() => {\n          showErrorMsg({\n            title: t`Error`,\n            description: t`Failed to create report for ${snapName}.`,\n          });\n        });\n    }\n    setShowModal(false);\n  };\n\n  return (\n    <>\n      <ReportButton\n        onClick={() => setShowModal(true)}\n        reported={reported}\n        isDisabled={reported || latestSnapStatus === SnapCurrentStatus.Disputed}\n      />\n      {showModal && (\n        <ReportSnapModal\n          snapName={snapName}\n          options={options}\n          isOpen={showModal}\n          onClose={() => setShowModal(false)}\n          onSign={onSign}\n        />\n      )}\n    </>\n  );\n};\n","import {\n  Box,\n  Container,\n  Divider,\n  Flex,\n  Stack,\n  StackDivider,\n} from '@chakra-ui/react';\nimport { graphql } from 'gatsby';\nimport { type FunctionComponent } from 'react';\nimport { useAccount } from 'wagmi';\n\nimport { InstallSnapButton, SnapWebsiteButton } from '../../../components';\nimport { RegistrySnapCategory } from '../../../constants';\nimport {\n  Authorship,\n  Metadata,\n  NotificationAcknowledger,\n  Permissions,\n  Description,\n  RelatedSnaps,\n  useGetInstalledSnapsQuery,\n} from '../../../features';\nimport { EndorseSnap } from '../../../features/snap/components/EndorseSnap';\nimport { ReportSnap } from '../../../features/snap/components/ReportSnap';\nimport type { Fields } from '../../../utils';\n\ntype SnapPageProps = {\n  data: {\n    snap: Fields<\n      Queries.Snap,\n      | 'name'\n      | 'icon'\n      | 'snapId'\n      | 'description'\n      | 'latestVersion'\n      | 'latestChecksum'\n      | 'website'\n      | 'onboard'\n      | 'category'\n      | 'author'\n      | 'sourceCode'\n      | 'additionalSourceCode'\n      | 'audits'\n      | 'banner'\n      | 'support'\n      | 'permissions'\n      | 'privateCode'\n      | 'privacyPolicy'\n      | 'termsOfUse'\n    >;\n  };\n};\n\nconst SnapPage: FunctionComponent<SnapPageProps> = ({ data }) => {\n  const {\n    name,\n    snapId,\n    icon,\n    website,\n    onboard,\n    description,\n    latestVersion,\n    latestChecksum,\n    category,\n    permissions,\n  } = data.snap;\n\n  const { data: installedSnaps } = useGetInstalledSnapsQuery();\n  const isInstalled = Boolean(installedSnaps?.[snapId]);\n  const { address, isConnected } = useAccount();\n\n  return (\n    <Box position=\"relative\">\n      <Box\n        pointerEvents=\"none\"\n        position=\"absolute\"\n        top=\"-50%\"\n        width=\"100%\"\n        height=\"75%\"\n        sx={{\n          background: `url(\"${icon}\") no-repeat center center`,\n          backgroundSize: 'cover',\n          filter: 'blur(96px) saturate(1.2)',\n          opacity: '0.25',\n        }}\n      />\n      <Container maxWidth=\"container.xl\" paddingTop=\"0\" marginTop=\"20\">\n        <NotificationAcknowledger snapId={snapId} version={latestVersion} />\n        <Flex\n          flexDirection={['column', null, 'row']}\n          justifyContent=\"space-between\"\n          alignItems=\"center\"\n          gap=\"6\"\n        >\n          <Authorship name={name} icon={icon} snapId={snapId} />\n          <Flex alignItems=\"center\" gap=\"4\" width={['100%', null, 'auto']}>\n            {isConnected && address && (\n              <ReportSnap\n                snapName={name}\n                snapChecksum={latestChecksum}\n                address={address}\n              />\n            )}\n            {isConnected && address && (\n              <EndorseSnap\n                snapName={name}\n                snapChecksum={latestChecksum}\n                address={address}\n              />\n            )}\n            {!onboard && (\n              <InstallSnapButton\n                snapId={snapId}\n                name={name}\n                icon={icon}\n                website={website}\n                version={latestVersion}\n              />\n            )}\n            {(isInstalled || onboard) && website && (\n              <SnapWebsiteButton snapId={snapId} website={website} />\n            )}\n          </Flex>\n        </Flex>\n\n        <Divider marginY=\"8\" />\n        <Metadata snap={data.snap} />\n        <Divider marginTop=\"8\" marginBottom=\"12\" />\n\n        <Stack\n          direction={['column', null, null, 'row']}\n          divider={<StackDivider />}\n          marginTop=\"2\"\n          marginBottom=\"12\"\n          spacing=\"8\"\n        >\n          <Description name={name} description={description} />\n          <Permissions snap={data.snap} permissions={permissions} />\n        </Stack>\n\n        {/* TODO: Enable account management category when there are more Snaps\n            in the registry. */}\n        {category && category !== RegistrySnapCategory.AccountManagement && (\n          <>\n            <Divider my=\"12\" />\n            <RelatedSnaps\n              snapId={snapId}\n              category={category as RegistrySnapCategory}\n            />\n          </>\n        )}\n      </Container>\n    </Box>\n  );\n};\n\ntype HeadProps = SnapPageProps & {\n  data: {\n    site: {\n      siteMetadata: Fields<\n        Queries.SiteSiteMetadata,\n        'title' | 'description' | 'author' | 'siteUrl'\n      >;\n    };\n  };\n};\n\nexport const Head: FunctionComponent<HeadProps> = ({ data }) => {\n  const title = `${data.snap.name} on the MetaMask Snaps Directory`;\n  const description = `Customize your web3 experience with ${data.snap.name}.`;\n  const image = `${data.site.siteMetadata.siteUrl}${data.snap.banner.publicURL}`;\n\n  return (\n    <>\n      <html lang=\"en\" />\n      <title>{title}</title>\n      <meta name=\"description\" content={description} />\n      <meta property=\"og:title\" content={data.snap.name} />\n      <meta property=\"og:site_name\" content={data.site.siteMetadata.title} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"og:image\" content={image} />\n      <meta name=\"og:image:width\" content=\"1200\" />\n      <meta name=\"og:image:height\" content=\"630\" />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:creator\" content={data.site.siteMetadata.author} />\n      <meta name=\"twitter:title\" content={data.snap.name} />\n      <meta name=\"twitter:description\" content={description} />\n      <meta name=\"twitter:image\" content={image} />\n    </>\n  );\n};\n\nexport const query = graphql`\n  query ($id: String) {\n    snap(id: { eq: $id }) {\n      name\n      snapId\n      icon\n      description {\n        description\n        trusted\n      }\n      latestVersion\n      latestChecksum\n      website\n      onboard\n      category\n      author {\n        name\n        website\n      }\n      sourceCode\n      additionalSourceCode {\n        name\n        url\n      }\n      audits {\n        auditor\n        report\n      }\n      banner {\n        publicURL\n      }\n      support {\n        contact\n        faq\n        knowledgeBase\n        keyRecovery\n      }\n      permissions\n      privateCode\n      privacyPolicy\n      termsOfUse\n    }\n\n    site {\n      siteMetadata {\n        title\n        description\n        author\n        siteUrl\n      }\n    }\n  }\n`;\n\nexport default SnapPage;\n"],"names":["StackDivider","props","jsx","div","className","__css","borderWidth","alignSelf","borderColor","width","height","displayName","EndorseSnapModal","_ref","snapName","options","onSign","onClose","isOpen","isLoading","setIsLoading","useState","selectedOptions","setSelectedOptions","_jsx","RequestSignModal","mode","headerIcon","StarFilledShadowIcon","fill","buttonText","i18n","_","id","onSignButtonClick","finally","children","Center","_jsxs","VStack","textAlign","fontSize","Text","fontWeight","Trans","noOfLines","as","values","components","variant","Link","href","target","MultipleCheckboxOptions","onChange","filter","index","EndorseSnap","address","snapChecksum","signMessage","signError","snapVCBuilder","useVerifiableCredential","issuer","getIssuerDid","latestSnapStatus","useSelector","getCurrentSnapStatusForIssuer","isSnapEndorsed","isSnapEndorsedByIssuer","showModal","setShowModal","endorsed","setEndorsed","useEffect","dispatch","useDispatch","showSuccessMsg","showErrorMsg","useToastMsg","useSignErrorHandler","_Fragment","EndorseButton","onClick","isDisabled","async","verifiableCredential","buildEndorsedPayload","selected","signature","assertion","getSignedAssertion","createSnapAssertion","then","action","type","endsWith","fetchSnapAssertionsForSnapId","catch","error","console","log","title","description","ReportSnapModal","QuestionRedIcon","ReportSnap","isSnapReported","isSnapReportedByIssuer","reported","setReported","ReportButton","SnapCurrentStatus","Disputed","VC","buildDisputedPayload","Head","_ref2","data","snap","name","image","site","siteMetadata","siteUrl","banner","publicURL","lang","content","property","author","snapId","icon","website","onboard","latestVersion","latestChecksum","category","permissions","installedSnaps","useGetInstalledSnapsQuery","isInstalled","Boolean","isConnected","useAccount","Box","position","pointerEvents","top","sx","background","backgroundSize","opacity","Container","maxWidth","paddingTop","marginTop","NotificationAcknowledger","version","Flex","flexDirection","justifyContent","alignItems","gap","Authorship","InstallSnapButton","SnapWebsiteButton","Divider","marginY","Metadata","marginBottom","Stack","direction","divider","spacing","Description","Permissions","RegistrySnapCategory","AccountManagement","my","RelatedSnaps"],"sourceRoot":""}