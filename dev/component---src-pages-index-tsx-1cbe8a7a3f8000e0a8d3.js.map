{"version":3,"file":"component---src-pages-index-tsx-1cbe8a7a3f8000e0a8d3.js","mappings":"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","sources":["webpack://@metamask/snaps-directory/./src/components/PermissionlessIntroductory.tsx","webpack://@metamask/snaps-directory/./src/pages/index.tsx","webpack://@metamask/snaps-directory/./src/assets/images/seo/home.png"],"sourcesContent":["import {\n  Box,\n  Link,\n  Heading,\n  Flex,\n  UnorderedList,\n  ListItem,\n  Text,\n} from '@chakra-ui/react';\nimport { Trans } from '@lingui/macro';\nimport type { FunctionComponent } from 'react';\n\nimport { DangerIcon } from './icons';\n\nexport const PermissionlessIntroductory: FunctionComponent = () => (\n  <Box bg=\"background.alternative\" padding=\"6\" mb=\"8\" mt=\"8\" borderRadius=\"xl\">\n    <Heading as=\"h2\" fontSize=\"3xl\" mb=\"8\">\n      <Flex>\n        <DangerIcon width=\"12\" mt=\"-1\" mr=\"2\" />\n        <Trans>\n          We&apos;re experimenting with a community reputation system for Snaps\n        </Trans>\n      </Flex>\n    </Heading>\n\n    <Flex flexDirection=\"column\" gap=\"4\" textAlign=\"left\">\n      <Text>\n        <Trans>\n          Launching Snaps is our first milestone towards permissionless\n          innovation. Making Snaps distribution permissionless is our next step\n          towards opening up MetaMask as a platform for developers and the\n          community.\n        </Trans>\n      </Text>\n\n      <Text>\n        <Trans>\n          We want to enable a decentralized App Store for MetaMask Snaps. We\n          envision a community of Snaps users, developers, auditors, and\n          security experts safeguarding Snaps based on collective community\n          wisdom and sentiment, instead of centralized gate-keeping.\n        </Trans>\n      </Text>\n\n      <Text>\n        <Trans>\n          We are launching this prototype to test some features of a\n          decentralized trust and reputation system for Snaps.\n        </Trans>\n      </Text>\n\n      <UnorderedList>\n        <ListItem>\n          <Trans>\n            Users can issue explicit trust or distrust attestations to each\n            other and Snaps\n          </Trans>\n        </ListItem>\n        <ListItem>\n          <Trans>\n            These attestations create a{' '}\n            <Link href=\"https://explorer-graph.web.app/\" target=\"_blank\">\n              reputation graph\n            </Link>{' '}\n            for Users and Snaps\n          </Trans>\n        </ListItem>\n        <ListItem>\n          <Trans>\n            Snaps and Users build reputation as a result of compute (EigenTrust)\n            on this reputation graph. This compute is verifiable and\n            configurable by the community.\n          </Trans>\n        </ListItem>\n        <ListItem>\n          <Trans>\n            This community ranking system can be used to identify safe and\n            malicious snaps.\n          </Trans>\n        </ListItem>\n      </UnorderedList>\n\n      <Text>\n        <Trans>\n          You can read a detailed User Guide for this prototype{' '}\n          <Link href=\"spd-experimentation-user-guide.pdf\" target=\"_blank\">\n            here\n          </Link>\n          .\n        </Trans>\n      </Text>\n\n      <Text>\n        <Trans>\n          Do share your feedback{' '}\n          <Link\n            href=\"https://docs.google.com/forms/d/e/1FAIpQLSekp2NT0zl8gttU-TeY_VI6Qo66GnLjLfUEYMh1flkL7z_faA/viewform?usp=sf_link\"\n            target=\"_blank\"\n          >\n            in this form\n          </Link>\n          , and join this{' '}\n          <Link href=\"https://t.me/+tzukbymkkjU5NGRk\" target=\"_blank\">\n            telegram group\n          </Link>{' '}\n          for questions and support.\n        </Trans>\n      </Text>\n    </Flex>\n  </Box>\n);\n","import { Container, Divider, Flex, Heading, Link } from '@chakra-ui/react';\nimport { defineMessage } from '@lingui/macro';\nimport { useLingui } from '@lingui/react';\nimport { graphql, Link as GatsbyLink, withPrefix } from 'gatsby';\nimport { useEffect, type FunctionComponent, Fragment } from 'react';\n\nimport banner from '../assets/images/seo/home.png';\nimport { PermissionlessIntroductory } from '../components/PermissionlessIntroductory';\nimport { RegistrySnapCategory, SNAP_CATEGORY_LINKS } from '../constants';\nimport { Banner, FilteredSnaps, resetFilters } from '../features';\nimport { Order } from '../features/filter/constants';\nimport { useDispatch } from '../hooks';\nimport type { Fields } from '../utils';\n\nconst GROUPS = [\n  {\n    header: defineMessage`Most Popular`,\n    limit: 3,\n    link: '/explore',\n    linkText: defineMessage`Explore All Snaps`,\n    images: true,\n  },\n  {\n    header: SNAP_CATEGORY_LINKS[RegistrySnapCategory.AccountManagement].header,\n    category: RegistrySnapCategory.AccountManagement,\n    limit: 3,\n    link: SNAP_CATEGORY_LINKS[RegistrySnapCategory.AccountManagement].link,\n    linkText:\n      SNAP_CATEGORY_LINKS[RegistrySnapCategory.AccountManagement].linkText,\n    order: Order.DeterministicRandom,\n  },\n  {\n    header: SNAP_CATEGORY_LINKS[RegistrySnapCategory.Interoperability].header,\n    category: RegistrySnapCategory.Interoperability,\n    limit: 6,\n    link: SNAP_CATEGORY_LINKS[RegistrySnapCategory.Interoperability].link,\n    linkText:\n      SNAP_CATEGORY_LINKS[RegistrySnapCategory.Interoperability].linkText,\n    order: Order.DeterministicRandom,\n  },\n  {\n    header:\n      SNAP_CATEGORY_LINKS[RegistrySnapCategory.TransactionInsights].header,\n    category: RegistrySnapCategory.TransactionInsights,\n    limit: 6,\n    link: SNAP_CATEGORY_LINKS[RegistrySnapCategory.TransactionInsights].link,\n    linkText:\n      SNAP_CATEGORY_LINKS[RegistrySnapCategory.TransactionInsights].linkText,\n    order: Order.DeterministicRandom,\n  },\n  {\n    header: SNAP_CATEGORY_LINKS[RegistrySnapCategory.Notifications].header,\n    category: RegistrySnapCategory.Notifications,\n    limit: 3,\n    link: SNAP_CATEGORY_LINKS[RegistrySnapCategory.Notifications].link,\n    linkText: SNAP_CATEGORY_LINKS[RegistrySnapCategory.Notifications].linkText,\n    order: Order.DeterministicRandom,\n  },\n  {\n    header: defineMessage`Latest`,\n    limit: 3,\n    link: '/latest',\n    linkText: defineMessage`See Latest`,\n    order: Order.Latest,\n  },\n];\n\nexport type IndexPageProps = {\n  data: {\n    allSnap: {\n      nodes: Fields<Queries.Snap, 'snapId' | 'icon'>[];\n    };\n  };\n};\n\nconst IndexPage: FunctionComponent<IndexPageProps> = ({ data }) => {\n  const i18n = useLingui();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(resetFilters());\n  }, [dispatch]);\n\n  return (\n    <Container\n      maxWidth=\"container.xl\"\n      paddingTop=\"0\"\n      marginTop=\"4\"\n      display=\"flex\"\n      flexDirection=\"column\"\n    >\n      <PermissionlessIntroductory />\n      <Banner snaps={data.allSnap.nodes} />\n      <Divider my=\"8\" />\n\n      {GROUPS.map(\n        ({ header, limit, category, link, linkText, order, images }, index) => (\n          <Fragment key={`group-${index}`}>\n            <Flex\n              width=\"100%\"\n              marginBottom=\"8\"\n              flexDirection=\"row\"\n              justifyContent=\"space-between\"\n              alignItems=\"center\"\n            >\n              <Heading as=\"h2\" fontSize=\"2xl\">\n                {i18n._(header)}\n              </Heading>\n              <Link as={GatsbyLink} to={link} variant=\"landing\" flexShrink=\"0\">\n                {i18n._(linkText)}\n              </Link>\n            </Flex>\n            <FilteredSnaps\n              limit={limit}\n              category={category}\n              order={order}\n              images={images}\n            />\n\n            {index !== GROUPS.length - 1 && <Divider mt=\"12\" mb=\"8\" />}\n          </Fragment>\n        ),\n      )}\n    </Container>\n  );\n};\n\ntype HeadProps = {\n  data: {\n    site: {\n      siteMetadata: Fields<\n        Queries.SiteSiteMetadata,\n        'title' | 'description' | 'author' | 'siteUrl'\n      >;\n    };\n  };\n};\n\nexport const Head: FunctionComponent<HeadProps> = ({ data }) => {\n  const image = `${data.site.siteMetadata.siteUrl}${withPrefix(banner)}`;\n\n  return (\n    <>\n      <html lang=\"en\" />\n      <title>{data.site.siteMetadata.title}</title>\n      <meta name=\"description\" content={data.site.siteMetadata.description} />\n      <meta property=\"og:title\" content={data.site.siteMetadata.title} />\n      <meta\n        property=\"og:description\"\n        content={data.site.siteMetadata.description}\n      />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"og:image\" content={image} />\n      <meta name=\"og:image:width\" content=\"1200\" />\n      <meta name=\"og:image:height\" content=\"630\" />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:creator\" content={data.site.siteMetadata.author} />\n      <meta name=\"twitter:title\" content={data.site.siteMetadata.title} />\n      <meta\n        name=\"twitter:description\"\n        content={data.site.siteMetadata.description}\n      />\n      <meta name=\"twitter:image\" content={image} />\n    </>\n  );\n};\n\nexport const query = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n        siteUrl\n      }\n    }\n\n    allSnap {\n      nodes {\n        snapId\n        icon\n      }\n    }\n  }\n`;\n\nexport default IndexPage;\n","export default __webpack_public_path__ + \"static/home-3da7273f125d0f7c0add3b849d33e152.png\";"],"names":["PermissionlessIntroductory","_jsxs","Box","bg","padding","mb","mt","borderRadius","children","_jsx","Heading","as","fontSize","Flex","DangerIcon","width","mr","Trans","id","flexDirection","gap","textAlign","Text","UnorderedList","ListItem","components","Link","href","target","GROUPS","header","limit","link","linkText","images","SNAP_CATEGORY_LINKS","RegistrySnapCategory","AccountManagement","category","order","Order","DeterministicRandom","Interoperability","TransactionInsights","Notifications","Latest","Head","_ref3","data","image","site","siteMetadata","siteUrl","withPrefix","banner","_Fragment","lang","title","name","content","description","property","author","_ref","i18n","useLingui","dispatch","useDispatch","useEffect","resetFilters","Container","maxWidth","paddingTop","marginTop","display","Banner","snaps","allSnap","nodes","Divider","my","map","_ref2","index","Fragment","marginBottom","justifyContent","alignItems","_","GatsbyLink","to","variant","flexShrink","FilteredSnaps","length"],"sourceRoot":""}