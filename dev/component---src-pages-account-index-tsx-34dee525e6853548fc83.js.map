{"version":3,"file":"component---src-pages-account-index-tsx-34dee525e6853548fc83.js","mappings":"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","sources":["webpack://@metamask/snaps-directory/./src/pages/404.tsx","webpack://@metamask/snaps-directory/./src/features/account/components/snaps/DevelopedSnapsSection.tsx","webpack://@metamask/snaps-directory/./node_modules/@chakra-ui/progress/dist/chunk-7CG3L4JY.mjs","webpack://@metamask/snaps-directory/./node_modules/@chakra-ui/progress/dist/chunk-TXZFUZNG.mjs","webpack://@metamask/snaps-directory/./node_modules/@chakra-ui/progress/dist/chunk-EMKK5VRD.mjs","webpack://@metamask/snaps-directory/./node_modules/@chakra-ui/progress/dist/chunk-Q6Q7I7E5.mjs","webpack://@metamask/snaps-directory/./src/features/account/connections/store.ts","webpack://@metamask/snaps-directory/./src/features/account/components/AccountInfo.tsx","webpack://@metamask/snaps-directory/./src/features/account/components/modals/AccountReportModal.tsx","webpack://@metamask/snaps-directory/./src/features/account/components/modals/TEEndorsementModal.tsx","webpack://@metamask/snaps-directory/./src/features/account/AccountReport.tsx","webpack://@metamask/snaps-directory/./src/features/account/AccountTEEndorsement.tsx","webpack://@metamask/snaps-directory/./src/features/account/MoreOptionMenu.tsx","webpack://@metamask/snaps-directory/./src/features/account/components/activity/ActivityItem.tsx","webpack://@metamask/snaps-directory/./src/features/account/components/activity/ActivitySection.tsx","webpack://@metamask/snaps-directory/./src/features/account/components/technical-expertise/TechnicalExpertiseItem.tsx","webpack://@metamask/snaps-directory/./src/features/account/components/technical-expertise/TechnicalExpertiseSection.tsx","webpack://@metamask/snaps-directory/./src/pages/account/index.tsx","webpack://@metamask/snaps-directory/./src/assets/images/seo/home.png"],"sourcesContent":["import { Container, Heading, Button } from '@chakra-ui/react';\nimport { Trans } from '@lingui/macro';\nimport { graphql, Link, withPrefix } from 'gatsby';\nimport type { FunctionComponent } from 'react';\n\nimport banner from '../assets/images/seo/home.png';\nimport { Fox } from '../components';\nimport type { Fields } from '../utils';\n\nconst NotFoundPage: FunctionComponent = () => (\n  <Container\n    display=\"flex\"\n    flexDirection=\"column\"\n    marginY=\"12\"\n    alignItems=\"center\"\n    textAlign=\"center\"\n    maxWidth=\"container.md\"\n  >\n    <Fox />\n    <Heading\n      as=\"h1\"\n      fontSize={['2xl', '4xl', '5xl']}\n      marginY=\"6\"\n      lineHeight=\"116%\"\n    >\n      <Trans>The page you&apos;re looking for can&apos;t be found.</Trans>\n    </Heading>\n    <Link to=\"/\">\n      <Button variant=\"primary\">\n        <Trans>Go home</Trans>\n      </Button>\n    </Link>\n  </Container>\n);\n\ntype HeadProps = {\n  data: {\n    site: {\n      siteMetadata: Fields<\n        Queries.SiteSiteMetadata,\n        'title' | 'description' | 'author' | 'siteUrl'\n      >;\n    };\n  };\n};\n\nexport const Head: FunctionComponent<HeadProps> = ({ data }) => {\n  const title = `Page not found - ${data.site.siteMetadata.title}`;\n  const image = `${data.site.siteMetadata.siteUrl}${withPrefix(banner)}`;\n\n  return (\n    <>\n      <html lang=\"en\" />\n      <title>{title}</title>\n      <meta name=\"description\" content={data.site.siteMetadata.description} />\n      <meta property=\"og:title\" content=\"Page not found\" />\n      <meta property=\"og:site_name\" content={data.site.siteMetadata.title} />\n      <meta\n        property=\"og:description\"\n        content={data.site.siteMetadata.description}\n      />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"og:image\" content={image} />\n      <meta name=\"og:image:width\" content=\"1200\" />\n      <meta name=\"og:image:height\" content=\"630\" />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:creator\" content={data.site.siteMetadata.author} />\n      <meta name=\"twitter:title\" content={title} />\n      <meta\n        name=\"twitter:description\"\n        content={data.site.siteMetadata.description}\n      />\n      <meta name=\"twitter:image\" content={image} />\n    </>\n  );\n};\n\nexport const query = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n        siteUrl\n      }\n    }\n  }\n`;\n\nexport default NotFoundPage;\n","import { Box, Divider, Heading, SimpleGrid } from '@chakra-ui/react';\nimport { t } from '@lingui/macro';\nimport type { Address } from '@wagmi/core';\nimport type { FunctionComponent } from 'react';\n\nimport { useSelector } from '../../../../hooks';\nimport { getSnapsByFilter } from '../../../snaps';\nimport { SnapCard } from '../../../snaps/components';\n\nexport type DevelopedSnapsSectionProps = {\n  author?: Address | undefined;\n};\n\nexport const DevelopedSnapsSection: FunctionComponent<\n  DevelopedSnapsSectionProps\n> = ({ author }) => {\n  const snaps = useSelector(\n    getSnapsByFilter({\n      author,\n    }),\n  );\n\n  if (snaps && snaps.length !== 0) {\n    return (\n      <>\n        <Divider mt=\"3rem\" mb=\"2rem\" />\n        <Heading as=\"h2\" fontSize=\"2xl\">\n          {t`Developed by this user`}\n        </Heading>\n        <Box data-testid=\"my-snaps-section\">\n          <SimpleGrid columns={[1, null, 2, 3]} spacing={4} marginX=\"-0.5rem\">\n            {snaps.map((snap, index) => (\n              <SnapCard key={`${snap.id}-${index}`} image={true} {...snap} />\n            ))}\n          </SimpleGrid>\n        </Box>\n      </>\n    );\n  }\n  return null;\n};\n","'use client'\n\n// src/circle.tsx\nimport { chakra } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Circle = (props) => /* @__PURE__ */ jsx(chakra.circle, { cx: 50, cy: 50, r: 42, fill: \"transparent\", ...props });\nCircle.displayName = \"Circle\";\n\nexport {\n  Circle\n};\n//# sourceMappingURL=chunk-7CG3L4JY.mjs.map","'use client'\n\n// src/progress.utils.tsx\nimport { keyframes } from \"@chakra-ui/system\";\nfunction valueToPercent(value, min, max) {\n  return (value - min) * 100 / (max - min);\n}\nvar spin = keyframes({\n  \"0%\": {\n    strokeDasharray: \"1, 400\",\n    strokeDashoffset: \"0\"\n  },\n  \"50%\": {\n    strokeDasharray: \"400, 400\",\n    strokeDashoffset: \"-100\"\n  },\n  \"100%\": {\n    strokeDasharray: \"400, 400\",\n    strokeDashoffset: \"-260\"\n  }\n});\nvar rotate = keyframes({\n  \"0%\": {\n    transform: \"rotate(0deg)\"\n  },\n  \"100%\": {\n    transform: \"rotate(360deg)\"\n  }\n});\nvar progress = keyframes({\n  \"0%\": { left: \"-40%\" },\n  \"100%\": { left: \"100%\" }\n});\nvar stripe = keyframes({\n  from: { backgroundPosition: \"1rem 0\" },\n  to: { backgroundPosition: \"0 0\" }\n});\nfunction getProgressProps(options) {\n  const {\n    value = 0,\n    min,\n    max,\n    valueText,\n    getValueText,\n    isIndeterminate,\n    role = \"progressbar\"\n  } = options;\n  const percent = valueToPercent(value, min, max);\n  const getAriaValueText = () => {\n    if (value == null)\n      return void 0;\n    return typeof getValueText === \"function\" ? getValueText(value, percent) : valueText;\n  };\n  return {\n    bind: {\n      \"data-indeterminate\": isIndeterminate ? \"\" : void 0,\n      \"aria-valuemax\": max,\n      \"aria-valuemin\": min,\n      \"aria-valuenow\": isIndeterminate ? void 0 : value,\n      \"aria-valuetext\": getAriaValueText(),\n      role\n    },\n    percent,\n    value\n  };\n}\n\nexport {\n  spin,\n  rotate,\n  progress,\n  stripe,\n  getProgressProps\n};\n//# sourceMappingURL=chunk-TXZFUZNG.mjs.map","'use client'\nimport {\n  rotate\n} from \"./chunk-TXZFUZNG.mjs\";\n\n// src/shape.tsx\nimport { chakra } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Shape = (props) => {\n  const { size, isIndeterminate, ...rest } = props;\n  return /* @__PURE__ */ jsx(\n    chakra.svg,\n    {\n      viewBox: \"0 0 100 100\",\n      __css: {\n        width: size,\n        height: size,\n        animation: isIndeterminate ? `${rotate} 2s linear infinite` : void 0\n      },\n      ...rest\n    }\n  );\n};\nShape.displayName = \"Shape\";\n\nexport {\n  Shape\n};\n//# sourceMappingURL=chunk-EMKK5VRD.mjs.map","'use client'\nimport {\n  Circle\n} from \"./chunk-7CG3L4JY.mjs\";\nimport {\n  Shape\n} from \"./chunk-EMKK5VRD.mjs\";\nimport {\n  getProgressProps,\n  spin\n} from \"./chunk-TXZFUZNG.mjs\";\n\n// src/circular-progress.tsx\nimport {\n  chakra,\n  forwardRef\n} from \"@chakra-ui/system\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar CircularProgress = forwardRef(\n  (props, ref) => {\n    var _a;\n    const {\n      size = \"48px\",\n      max = 100,\n      min = 0,\n      valueText,\n      getValueText,\n      value,\n      capIsRound,\n      children,\n      thickness = \"10px\",\n      color = \"#0078d4\",\n      trackColor = \"#edebe9\",\n      isIndeterminate,\n      ...rest\n    } = props;\n    const progress = getProgressProps({\n      min,\n      max,\n      value,\n      valueText,\n      getValueText,\n      isIndeterminate\n    });\n    const determinant = isIndeterminate ? void 0 : ((_a = progress.percent) != null ? _a : 0) * 2.64;\n    const strokeDasharray = determinant == null ? void 0 : `${determinant} ${264 - determinant}`;\n    const indicatorProps = isIndeterminate ? {\n      css: { animation: `${spin} 1.5s linear infinite` }\n    } : {\n      strokeDashoffset: 66,\n      strokeDasharray,\n      transitionProperty: \"stroke-dasharray, stroke\",\n      transitionDuration: \"0.6s\",\n      transitionTimingFunction: \"ease\"\n    };\n    const rootStyles = {\n      display: \"inline-block\",\n      position: \"relative\",\n      verticalAlign: \"middle\",\n      fontSize: size\n    };\n    return /* @__PURE__ */ jsxs(\n      chakra.div,\n      {\n        ref,\n        className: \"chakra-progress\",\n        ...progress.bind,\n        ...rest,\n        __css: rootStyles,\n        children: [\n          /* @__PURE__ */ jsxs(Shape, { size, isIndeterminate, children: [\n            /* @__PURE__ */ jsx(\n              Circle,\n              {\n                stroke: trackColor,\n                strokeWidth: thickness,\n                className: \"chakra-progress__track\"\n              }\n            ),\n            /* @__PURE__ */ jsx(\n              Circle,\n              {\n                stroke: color,\n                strokeWidth: thickness,\n                className: \"chakra-progress__indicator\",\n                strokeLinecap: capIsRound ? \"round\" : void 0,\n                opacity: progress.value === 0 && !isIndeterminate ? 0 : void 0,\n                ...indicatorProps\n              }\n            )\n          ] }),\n          children\n        ]\n      }\n    );\n  }\n);\nCircularProgress.displayName = \"CircularProgress\";\n\nexport {\n  CircularProgress\n};\n//# sourceMappingURL=chunk-Q6Q7I7E5.mjs.map","import { createSelector } from '@reduxjs/toolkit';\n\nimport { type ApplicationState } from '../../../store';\nimport { type AccountAssertionsState } from '../assertions/store';\n\nexport type AccountNode = {\n  id: string;\n  group: number;\n  isMain: boolean;\n};\n\nexport type AccountLink = {\n  source: string;\n  target: string;\n};\n\nexport type AccountConnections = {\n  nodes: AccountNode[];\n  links: AccountLink[];\n};\n\nconst getConnectedNodesForLevel = (\n  accountAssertions: AccountAssertionsState,\n  accountId: string,\n  level: number,\n  ignoreAccountIds: string[] = [],\n) => {\n  const accountConnections: AccountConnections = {\n    nodes: [],\n    links: [],\n  };\n  // As level 1 is called from outside, the main account is added.\n  if (level === 1) {\n    accountConnections.nodes.push({\n      id: accountId,\n      group: level,\n      isMain: level === 1,\n    });\n  }\n\n  // Find assertions for the account ignoring the previous ones\n  const endorsementsOnAccount = accountAssertions.accountAssertions.filter(\n    (assertion) =>\n      assertion.accountId === accountId &&\n      !ignoreAccountIds.includes(assertion.issuer.toLowerCase()),\n  );\n\n  // Get top 2 connections for the account\n  const topTwoConnections = endorsementsOnAccount.slice(0, 2);\n\n  // Adding the top two connections to the final result\n  topTwoConnections.forEach((connection) => {\n    accountConnections.links.push({\n      source: connection.accountId,\n      target: connection.issuer,\n    });\n    accountConnections.nodes.push({\n      id: connection.issuer,\n      group: level + 1,\n      isMain: false,\n    });\n  });\n\n  if (level < 2) {\n    // Increase the level\n    const connectedNodeLevel = level + 1;\n\n    // Add current accounts to ignored list\n    ignoreAccountIds.push(\n      ...accountConnections.nodes.map((node) => node.id.toLowerCase()),\n    );\n\n    // For each level the top two connections are added to final result\n    topTwoConnections.forEach((connection) => {\n      const issuerConnections = getConnectedNodesForLevel(\n        accountAssertions,\n        connection.issuer,\n        connectedNodeLevel,\n        ignoreAccountIds,\n      );\n      accountConnections.links.push(...issuerConnections.links);\n      accountConnections.nodes.push(...issuerConnections.nodes);\n    });\n  }\n  return accountConnections;\n};\n\nexport const getAccountConnectedNodes = (accountId: string) =>\n  createSelector(\n    (state: ApplicationState) => state.accountAssertions,\n    (accountAssertions) => {\n      return getConnectedNodesForLevel(accountAssertions, accountId, 1);\n    },\n  );\n","import { CircularProgress, Heading, HStack, VStack } from '@chakra-ui/react';\nimport type { Hex } from '@metamask/utils';\nimport { mainnet } from '@wagmi/core/chains';\nimport type { FunctionComponent } from 'react';\nimport { useAccount, useEnsName } from 'wagmi';\n\nimport { AccountRoleTags } from './AccountRoleTags';\nimport { MoreOptionMenu } from '..';\nimport { ConnectedNodes } from '../../../components';\nimport { useSelector, useVerifiableCredential } from '../../../hooks';\nimport { trimAddress } from '../../../utils';\nimport { getAccountConnectedNodes } from '../connections/store';\nimport { getAccountTrustScoreForAccountId } from '../trust-score/store';\n\nexport type AccountInfoProps = {\n  address: Hex;\n};\n\nexport const AccountInfo: FunctionComponent<AccountInfoProps> = ({\n  address,\n}) => {\n  const { data, isLoading } = useEnsName({\n    address,\n    chainId: mainnet.id,\n  });\n  const { isConnected } = useAccount();\n\n  const { accountVCBuilder } = useVerifiableCredential();\n\n  const accountId = accountVCBuilder.getSubjectDid(address);\n\n  const trustScores = useSelector(getAccountTrustScoreForAccountId(accountId));\n  const connectedNodes = useSelector(getAccountConnectedNodes(accountId));\n\n  return (\n    <VStack spacing=\"8\" data-testid=\"account-info\">\n      <ConnectedNodes data={connectedNodes}></ConnectedNodes>\n      {trustScores.length > 0 && <AccountRoleTags trustScores={trustScores} />}\n      <HStack>\n        <Heading\n          as=\"h3\"\n          fontSize=\"3xl\"\n          color=\"text.alternative\"\n          textAlign=\"center\"\n        >\n          {isLoading ? (\n            <CircularProgress value={80} data-testid=\"account-info-loading\" />\n          ) : (\n            data ?? trimAddress(address)\n          )}\n        </Heading>\n        {isConnected && (\n          <>\n            <MoreOptionMenu subjectAddress={address} />\n            {/* Hidden for now */}\n            {/* <AddToUserCircleModal subjectAddress={address} /> */}\n          </>\n        )}\n      </HStack>\n    </VStack>\n  );\n};\n","import { Center, Link, Text, VStack } from '@chakra-ui/react';\nimport { t, Trans } from '@lingui/macro';\nimport { type FunctionComponent, useState } from 'react';\n\nimport {\n  MultipleCheckboxOptions,\n  QuestionRedIcon,\n  RequestSignModal,\n} from '../../../../components';\n\nexport type AccountReportModalProps = {\n  reportEntity: string;\n  options: string[];\n  onSign: (arg: string[]) => Promise<void>;\n  onClose: () => void;\n  visibility: boolean;\n};\n\nexport const AccountReportModal: FunctionComponent<AccountReportModalProps> = ({\n  reportEntity,\n  options,\n  onSign,\n  onClose,\n  visibility,\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedOptions, setSelectedOptions] = useState([] as string[]);\n\n  const onSignButtonClick = () => {\n    setIsLoading(true);\n\n    onSign(selectedOptions).finally(() => {\n      setIsLoading(false);\n    });\n  };\n\n  return (\n    <RequestSignModal\n      isOpen={visibility}\n      isLoading={isLoading}\n      mode=\"negative\"\n      headerIcon={<QuestionRedIcon />}\n      buttonText={t`Sign to report`}\n      onClose={onClose}\n      onSignButtonClick={onSignButtonClick}\n    >\n      <Center>\n        <VStack textAlign=\"center\" fontSize=\"md\">\n          <Text fontWeight=\"medium\">\n            <Trans>Report a Malicious Actor</Trans>\n          </Text>\n\n          <Text noOfLines={2} as=\"span\">\n            <Trans>\n              Report{' '}\n              <Text variant=\"blue\" as=\"span\">\n                {reportEntity}\n              </Text>{' '}\n              as malicious to safeguard your community.\n            </Trans>{' '}\n            <Link>\n              <Trans>Learn more</Trans>\n            </Link>\n          </Text>\n          <MultipleCheckboxOptions\n            options={options}\n            onChange={(values) => {\n              setSelectedOptions(\n                options.filter((_, index) => values[index] === true),\n              );\n            }}\n          />\n        </VStack>\n      </Center>\n    </RequestSignModal>\n  );\n};\n","import { Box, Center, Checkbox, Link, Text, VStack } from '@chakra-ui/react';\nimport { t, Trans } from '@lingui/macro';\nimport { type FunctionComponent, useState } from 'react';\n\nimport { AvatarBlueIcon, RequestSignModal } from '../../../../components';\n\nexport type TEEndorsementModalProps = {\n  trustEntity: string;\n  options: TEEndorsementOption[];\n  onSign: (arg: string[]) => Promise<void>;\n  onClose: () => void;\n  visibility: boolean;\n};\n\nexport type TEEndorsementOption = {\n  label: string;\n  value: string;\n  description?: string;\n};\n\nexport const TEEndorsementModal: FunctionComponent<TEEndorsementModalProps> = ({\n  trustEntity,\n  options,\n  onSign,\n  onClose,\n  visibility,\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [checkedItems, setCheckedItems] = useState(options.map(() => false));\n\n  const handleCheckboxChange = (checked: boolean, index: number) => {\n    checkedItems[index] = checked;\n    setCheckedItems([...checkedItems]);\n  };\n\n  const onSignButtonClick = () => {\n    setIsLoading(true);\n\n    const args: string[] = [];\n    checkedItems.forEach((state: boolean, index: number) => {\n      if (state) {\n        args.push(options[index]?.value as string);\n      }\n    });\n\n    onSign(args).finally(() => {\n      setIsLoading(false);\n    });\n  };\n\n  return (\n    <RequestSignModal\n      isOpen={visibility}\n      isLoading={isLoading}\n      mode=\"positive\"\n      headerIcon={<AvatarBlueIcon />}\n      buttonText={t`Sign to endorse`}\n      onClose={onClose}\n      onSignButtonClick={onSignButtonClick}\n    >\n      <Center>\n        <VStack fontSize=\"md\">\n          <Text fontWeight=\"medium\" textAlign=\"center\">\n            <Trans>Endorse Technical Expertises</Trans>\n          </Text>\n          <Text noOfLines={2} as=\"span\">\n            <Trans>\n              Endorse{' '}\n              <Text variant=\"blue\" as=\"span\">\n                {trustEntity}\n              </Text>{' '}\n              expertise within your community.\n            </Trans>{' '}\n            <Link>\n              <Trans>Learn more</Trans>\n            </Link>\n          </Text>\n          {options.map((option: TEEndorsementOption, index: number) => (\n            <Box\n              background=\"background.default\"\n              padding=\"1rem\"\n              borderRadius=\"1rem\"\n              width=\"100%\"\n              mt=\"1rem\"\n              key={index}\n            >\n              <>\n                <Checkbox\n                  size=\"md\"\n                  borderRadius=\"0.25rem\"\n                  padding=\"0.012rem\"\n                  marginInline=\"1\"\n                  value={option.value}\n                  onChange={(event) =>\n                    handleCheckboxChange(event.target.checked, index)\n                  }\n                >\n                  <Text>{option.label}</Text>\n                </Checkbox>\n                {option.description && (\n                  <Text fontSize=\"xs\">{option.description}</Text>\n                )}\n              </>\n            </Box>\n          ))}\n        </VStack>\n      </Center>\n    </RequestSignModal>\n  );\n};\n","import { t } from '@lingui/macro';\nimport type { Hex } from '@metamask/utils';\nimport { mainnet } from '@wagmi/core/chains';\nimport { type FunctionComponent, useEffect, useMemo, useState } from 'react';\nimport { useEnsName } from 'wagmi';\n\nimport {\n  createAccountAssertion,\n  fetchAccountAssertionsForAccountId,\n} from './assertions/api';\nimport {\n  getCurrentTrustworthinessLevelForIssuer,\n  isAccountReportedByIssuer,\n} from './assertions/store';\nimport { AccountReportModal } from './components';\nimport { ReportButton } from '../../components';\nimport { useDispatch, useSelector, useVerifiableCredential } from '../../hooks';\nimport { useSignErrorHandler } from '../../hooks/useSignErrorHandler';\nimport useToastMsg from '../../hooks/useToastMsg';\nimport { trimAddress } from '../../utils';\n\ntype AccountReportProps = {\n  address: Hex;\n  connectedAddress: Hex;\n};\n\nexport const AccountReport: FunctionComponent<AccountReportProps> = ({\n  address,\n  connectedAddress,\n}) => {\n  const { data } = useEnsName({\n    address,\n    chainId: mainnet.id,\n  });\n\n  const { signMessage, signError, accountVCBuilder } =\n    useVerifiableCredential();\n\n  const trimmedAddress = useMemo(() => trimAddress(address), [address]);\n\n  const pkhAddress = accountVCBuilder.getSubjectDid(address);\n  const issuer = accountVCBuilder.getSubjectDid(connectedAddress);\n\n  const latestTrustworthinessLevel = useSelector(\n    getCurrentTrustworthinessLevelForIssuer(pkhAddress, issuer),\n  );\n\n  const isAccountReported = useSelector(\n    isAccountReportedByIssuer(pkhAddress, issuer),\n  );\n\n  const reportEntity = data ?? trimmedAddress;\n\n  const [showModal, setShowModal] = useState(false);\n  const [reported, setEndorsed] = useState(isAccountReported);\n\n  useEffect(() => {\n    setEndorsed(isAccountReported);\n  }, [isAccountReported]);\n\n  const dispatch = useDispatch();\n\n  const { showSuccessMsg, showErrorMsg } = useToastMsg();\n\n  useSignErrorHandler(signError);\n\n  // TODO: hardcode options for now, change to dynamic if needed\n  const options = [\n    t`Scamming`,\n    t`Hacking`,\n    t`Harassment`,\n    t`Disinformation`,\n    t`Other`,\n  ];\n\n  const onSign = async (selected: string[]) => {\n    const VC = accountVCBuilder.buildReportAccountTrust(\n      connectedAddress,\n      address,\n      selected,\n    );\n\n    const signature = await signMessage(VC);\n\n    if (signature) {\n      const assertion = accountVCBuilder.getSignedAssertion(VC, signature);\n      dispatch(createAccountAssertion(assertion))\n        .then((action) => {\n          if (action.type.endsWith('fulfilled')) {\n            dispatch(fetchAccountAssertionsForAccountId(pkhAddress)).catch(\n              (error) => console.log(error),\n            );\n            setEndorsed(true);\n            showSuccessMsg({\n              title: t`Success`,\n              description: t`${pkhAddress} has been reported.`,\n            });\n          } else {\n            showErrorMsg({\n              title: t`Error`,\n              description: t`Failed to create report for ${pkhAddress}.`,\n            });\n          }\n        })\n        .catch(() => {\n          showErrorMsg({\n            title: t`Error`,\n            description: t`Failed to create report for ${pkhAddress}.`,\n          });\n        });\n    }\n    setShowModal(false);\n  };\n\n  return (\n    <>\n      <ReportButton\n        onClick={() => setShowModal(true)}\n        reported={reported}\n        isDisabled={\n          reported ||\n          (latestTrustworthinessLevel !== undefined &&\n            latestTrustworthinessLevel < 0)\n        }\n      />\n      {showModal && (\n        <AccountReportModal\n          reportEntity={reportEntity}\n          visibility={showModal}\n          onClose={() => setShowModal(false)}\n          options={options}\n          onSign={onSign}\n        />\n      )}\n    </>\n  );\n};\n","import { t } from '@lingui/macro';\nimport type { Hex } from '@metamask/utils';\nimport type { Address } from '@wagmi/core';\nimport { mainnet } from '@wagmi/core/chains';\nimport { type FunctionComponent, useEffect, useMemo, useState } from 'react';\nimport { useEnsName } from 'wagmi';\n\nimport {\n  createAccountAssertion,\n  fetchAccountAssertionsForAccountId,\n} from './assertions/api';\nimport {\n  getCurrentTrustworthinessLevelForIssuer,\n  isAccountEndorsedByIssuer,\n} from './assertions/store';\nimport { TEEndorsementModal } from './components';\nimport { EndorseButton } from '../../components';\nimport { useDispatch, useSelector } from '../../hooks';\nimport { useSignErrorHandler } from '../../hooks/useSignErrorHandler';\nimport useToastMsg from '../../hooks/useToastMsg';\nimport { useVerifiableCredential } from '../../hooks/useVerifiableCredential';\nimport {\n  trimAddress,\n  type Trustworthiness,\n  TrustworthinessScope,\n} from '../../utils';\n\ntype AccountTEEndorsementProps = {\n  address: Hex;\n  connectedAddress: Address;\n};\n\nexport const AccountTEEndorsement: FunctionComponent<\n  AccountTEEndorsementProps\n> = ({ address, connectedAddress }) => {\n  const { data } = useEnsName({\n    address,\n    chainId: mainnet.id,\n  });\n\n  const { signMessage, signError, accountVCBuilder } =\n    useVerifiableCredential();\n\n  const trimmedAddress = useMemo(() => trimAddress(address), [address]);\n\n  const pkhAddress = accountVCBuilder.getSubjectDid(address);\n  const issuer = accountVCBuilder.getSubjectDid(connectedAddress);\n\n  const latestTrustworthinessLevel = useSelector(\n    getCurrentTrustworthinessLevelForIssuer(pkhAddress, issuer),\n  );\n\n  const isAccountEndorsed = useSelector(\n    isAccountEndorsedByIssuer(pkhAddress, issuer),\n  );\n\n  const trustEntity = data ?? trimmedAddress;\n\n  const [showModal, setShowModal] = useState(false);\n  const [endorsed, setEndorsed] = useState(isAccountEndorsed);\n\n  useEffect(() => {\n    setEndorsed(isAccountEndorsed);\n  }, [isAccountEndorsed]);\n\n  const dispatch = useDispatch();\n\n  const { showSuccessMsg, showErrorMsg } = useToastMsg();\n\n  useSignErrorHandler(signError);\n\n  const options = [\n    {\n      label: t`Software Development`,\n      description: t`Ability to develop reliable Snaps`,\n      value: TrustworthinessScope.SoftwareDevelopment,\n    },\n    {\n      label: t`Software Security`,\n      description: t`Ability to evaluate Snaps security`,\n      value: TrustworthinessScope.SoftwareSecurity,\n    },\n  ];\n\n  const fillOptions = (selected: string[]): Trustworthiness[] => {\n    const selectedOptions = new Set<string>(selected);\n\n    return options.map((option) => ({\n      scope: option.value,\n      level: selectedOptions.has(option.value) ? 1 : 0,\n    }));\n  };\n\n  const onSign = async (selected: string[]) => {\n    const VC = accountVCBuilder.buildTechnicalExpertiseTrust(\n      connectedAddress,\n      address,\n      fillOptions(selected),\n    );\n\n    const signature = await signMessage(VC);\n\n    if (signature) {\n      const assertion = accountVCBuilder.getSignedAssertion(VC, signature);\n      dispatch(createAccountAssertion(assertion))\n        .then((action) => {\n          if (action.type.endsWith('fulfilled')) {\n            dispatch(fetchAccountAssertionsForAccountId(pkhAddress)).catch(\n              (error) => console.log(error),\n            );\n            setEndorsed(true);\n            showSuccessMsg({\n              title: t`Success`,\n              description: t`${pkhAddress} has been endorsed.`,\n            });\n          } else {\n            showErrorMsg({\n              title: t`Error`,\n              description: t`Failed to create endorsement for ${pkhAddress}.`,\n            });\n          }\n        })\n        .catch(() => {\n          showErrorMsg({\n            title: t`Error`,\n            description: t`Failed to create endorsement for ${pkhAddress}.`,\n          });\n        });\n    }\n    setShowModal(false);\n  };\n\n  return (\n    <>\n      <EndorseButton\n        onClick={() => setShowModal(true)}\n        endorsed={endorsed}\n        isDisabled={endorsed || latestTrustworthinessLevel !== undefined}\n      />\n      {showModal && (\n        <TEEndorsementModal\n          trustEntity={trustEntity}\n          visibility={showModal}\n          onClose={() => setShowModal(false)}\n          options={options}\n          onSign={onSign}\n        />\n      )}\n    </>\n  );\n};\n","import { t } from '@lingui/macro';\nimport { useCallback, type FunctionComponent } from 'react';\nimport { useAccount, useNetwork } from 'wagmi';\n\nimport {\n  ExportOutlineIcon,\n  IconMenu,\n  MenuItemCard,\n  MoreOptionIcon,\n  ShareIcon,\n} from '../../components';\nimport useToastMsg from '../../hooks/useToastMsg';\n\ntype MoreOptionMenuProps = {\n  subjectAddress: string;\n};\n\nexport const MoreOptionMenu: FunctionComponent<MoreOptionMenuProps> = ({\n  subjectAddress,\n}) => {\n  const { chain } = useNetwork();\n  const { address } = useAccount();\n  const { showSuccessMsg, showErrorMsg } = useToastMsg();\n\n  // Dont know why when we write following as async method, the typescript will have error complaining about the return type Promise<Void>\n  const copyToClipboard = useCallback(() => {\n    navigator.clipboard\n      .writeText(`${window.location.origin}/account/?address=${subjectAddress}`)\n      .then(() => {\n        showSuccessMsg({\n          title: t`Copied`,\n          description: t`Profile link copied to clipboard`,\n        });\n      })\n      .catch(() => {\n        showErrorMsg({\n          title: t`Error`,\n          description: t`Failed to copy profile link to clipboard`,\n        });\n      });\n  }, [subjectAddress, showErrorMsg, showSuccessMsg]);\n\n  const openBlockExplorer = useCallback(() => {\n    window.open(`${chain?.blockExplorers?.etherscan?.url}/address/${address}`);\n  }, [chain, address]);\n\n  // const shouldShowAddModal = useMemo(() => {\n  //   if (address === subjectAddress) {\n  //     return false;\n  //   }\n\n  //   if (userAccount.userCircle.includes(subjectAddress)) {\n  //     return false;\n  //   }\n\n  //   return true;\n  // }, [address, subjectAddress, userAccount]);\n\n  return (\n    <IconMenu icon={<MoreOptionIcon />}>\n      {/* {shouldShowAddModal && (\n        <MenuItemCard\n          icon={<UserCircleAddIcon />}\n          label={t`Add to my circle`}\n          testId=\"add-to-circle\"\n          onClick={() => dispatch(setAddToUserModalOpen(true))}\n        />\n      )} */}\n      <MenuItemCard\n        icon={<ShareIcon />}\n        label={t`Copy profile link`}\n        testId=\"copy-profile-link\"\n        onClick={() => {\n          copyToClipboard();\n        }}\n      />\n      <MenuItemCard\n        icon={<ExportOutlineIcon />}\n        label={t`Etherscan`}\n        testId=\"etherscan\"\n        onClick={() => openBlockExplorer()}\n      />\n    </IconMenu>\n  );\n};\n","import { Box, HStack, Text } from '@chakra-ui/react';\nimport { t } from '@lingui/macro';\nimport { formatDistanceToNow } from 'date-fns';\nimport type { FunctionComponent } from 'react';\nimport { useCallback, useMemo } from 'react';\n\nimport {\n  QuestionIcon,\n  StarFilledIcon,\n  WarningIcon,\n} from '../../../../components';\nimport { EntityName } from '../../../../components/EntityName';\nimport type { AccountAssertionState } from '../../assertions/store';\n\nexport type ActivityItemProps = {\n  assertion: AccountAssertionState;\n};\n\nexport const ActivityItem: FunctionComponent<ActivityItemProps> = ({\n  assertion,\n}) => {\n  const isSnap = useMemo(\n    () => assertion.accountId.startsWith('snap://'),\n    [assertion.accountId],\n  );\n\n  const type = useCallback(() => {\n    if (isSnap) {\n      if (assertion.statusReason?.type === 'Endorse') {\n        return (\n          <span style={{ display: 'flex', alignItems: 'center' }}>\n            <StarFilledIcon width=\"20px\" fill=\"icon.muted\" mr={2} />\n            {t`Endorsed`}\n          </span>\n        );\n      } else if (assertion.statusReason?.type === 'Malicious') {\n        return (\n          <span style={{ display: 'flex', alignItems: 'center' }}>\n            <WarningIcon width=\"20px\" fill=\"icon.muted\" mr={2} />\n            {t`Reported`}\n          </span>\n        );\n      }\n    } else if (\n      assertion.trustworthiness?.filter(\n        (trustworthiness) => trustworthiness.level >= 0,\n      ).length > 0\n    ) {\n      return (\n        <span style={{ display: 'flex', alignItems: 'center' }}>\n          <StarFilledIcon width=\"20px\" fill=\"icon.muted\" mr={2} />\n          {t`Endorsed`}\n        </span>\n      );\n    } else if (\n      assertion.trustworthiness?.filter(\n        (trustworthiness) => trustworthiness.level < 0,\n      ).length > 0\n    ) {\n      return (\n        <span style={{ display: 'flex', alignItems: 'center' }}>\n          <WarningIcon width=\"20px\" fill=\"icon.muted\" mr={2} />\n          {t`Reported`}\n        </span>\n      );\n    }\n\n    return (\n      <span style={{ display: 'flex', alignItems: 'center' }}>\n        <QuestionIcon width=\"20px\" fill=\"icon.muted\" mr={2} />\n        {t`Unknown activity`}\n      </span>\n    );\n  }, [isSnap, assertion]);\n\n  const reason = useCallback(() => {\n    let reasons;\n\n    if (isSnap) {\n      reasons = [...(assertion.statusReason?.value || [])];\n    } else {\n      reasons = assertion.trustworthiness?.map(\n        (trustworthiness) => trustworthiness.scope,\n      );\n    }\n\n    if (!reasons || reasons.length === 0) {\n      return '';\n    } else if (reasons.length === 1) {\n      return `for ${reasons[0]}`;\n    }\n\n    const lastItem = reasons.pop();\n    const lastItemLink = t`and`;\n\n    return `for ${reasons.join(', ')} ${lastItemLink} ${lastItem}`;\n  }, [isSnap, assertion]);\n\n  return (\n    <HStack mb={4} width={'100%'} justifyContent={'space-between'}>\n      <HStack>\n        <Text>{type()}</Text>\n        <EntityName subject={assertion.accountId} />\n        <Text>{reason()}</Text>\n      </HStack>\n      <Box alignContent={'flex-end'}>\n        <Text color={'icon.muted'}>\n          {formatDistanceToNow(assertion.issuanceDate, { addSuffix: true })}\n        </Text>\n      </Box>\n    </HStack>\n  );\n};\n","import { Box, Divider, Heading } from '@chakra-ui/react';\nimport { t } from '@lingui/macro';\nimport type { Address } from '@wagmi/core';\nimport type { FunctionComponent } from 'react';\nimport { useMemo } from 'react';\n\nimport { ActivityItem } from './ActivityItem';\nimport { useSelector, useVerifiableCredential } from '../../../../hooks';\nimport { getIssuedAssertionsForIssuerId } from '../../assertions/store';\n\nexport type ActivitySectionProps = {\n  address: Address;\n};\n\nexport const ActivitySection: FunctionComponent<ActivitySectionProps> = ({\n  address,\n}) => {\n  const { accountVCBuilder } = useVerifiableCredential();\n  const pkhAddress = useMemo(\n    () => accountVCBuilder.getSubjectDid(address),\n    [accountVCBuilder, address],\n  );\n  const assertions = useSelector(getIssuedAssertionsForIssuerId(pkhAddress));\n\n  if (assertions && assertions.length !== 0) {\n    return (\n      <>\n        <Divider mt=\"3rem\" mb=\"2rem\" />\n        <Heading as=\"h2\" fontSize=\"2xl\" mb=\"2rem\">\n          {t`Activity`}\n        </Heading>\n        <Box data-testid=\"activity-section\">\n          {assertions.map((assertion, index) => (\n            <ActivityItem\n              key={`${assertion.accountId}-${index}`}\n              assertion={assertion}\n            />\n          ))}\n        </Box>\n      </>\n    );\n  }\n\n  return null;\n};\n","import { HStack, Text, VStack } from '@chakra-ui/react';\nimport { t } from '@lingui/macro';\nimport type { FunctionComponent } from 'react';\n\nimport { EntityName } from '../../../../components/EntityName';\nimport type { AccountAssertionState } from '../../assertions/store';\nimport type { PKHDid, TrustworthinessScope } from '../../assertions/types';\n\nexport type TechnicalExpertiseItemProps = {\n  endorsements: AccountAssertionState[];\n  type: TrustworthinessScope;\n  myDid: PKHDid;\n};\n\nexport const TechnicalExpertiseItem: FunctionComponent<\n  TechnicalExpertiseItemProps\n> = ({ endorsements, type, myDid }) => {\n  const isEndorsedByMe = endorsements.find(\n    (endorsement) => endorsement.issuer.toLowerCase() === myDid.toLowerCase(),\n  );\n\n  const endorsementsCount = endorsements.length;\n  const maxEndorsementsToDisplay = Math.min(3, endorsementsCount);\n  const maxEndorsements = isEndorsedByMe\n    ? maxEndorsementsToDisplay - 1\n    : maxEndorsementsToDisplay;\n\n  return (\n    <VStack mb={2} alignItems={'start'}>\n      <Text fontWeight={'medium'}>{type}</Text>\n      <HStack>\n        <Text>{t`Endorsed by`}</Text>\n        {isEndorsedByMe && (\n          <>\n            <EntityName\n              key={`${myDid}-${type}`}\n              subject={myDid}\n              title={`${t`you`}`}\n            />\n            {endorsementsCount > 1 && <Text ml={-1}>,</Text>}\n          </>\n        )}\n        {endorsements.slice(0, maxEndorsements).map((endorsement, index) => (\n          <>\n            <EntityName\n              key={`${endorsement.issuer}-${type}`}\n              subject={endorsement.issuer}\n            />\n            {index < maxEndorsements - 1 && <Text ml={-1}>,</Text>}\n          </>\n        ))}\n        {endorsementsCount > maxEndorsements && (\n          <Text ml={0}>{`+ ${\n            endorsementsCount - maxEndorsements\n          } ${t`more`}`}</Text>\n        )}\n      </HStack>\n    </VStack>\n  );\n};\n","import { Box, Divider, Heading, HStack } from '@chakra-ui/react';\nimport { t } from '@lingui/macro';\nimport type { Address } from '@wagmi/core';\nimport type { FunctionComponent } from 'react';\nimport { useMemo } from 'react';\n\nimport { TechnicalExpertiseItem } from './TechnicalExpertiseItem';\nimport { useSelector, useVerifiableCredential } from '../../../../hooks';\nimport { AccountTEEndorsement } from '../../AccountTEEndorsement';\nimport { getTechnicalEndorsementsForAccountId } from '../../assertions/store';\n\nexport type TechnicalExpertiseSectionProps = {\n  address: Address;\n  connectedAddress?: Address;\n};\n\nexport const TechnicalExpertiseSection: FunctionComponent<\n  TechnicalExpertiseSectionProps\n> = ({ address, connectedAddress }) => {\n  const { accountVCBuilder } = useVerifiableCredential();\n  const pkhAddress = useMemo(\n    () => accountVCBuilder.getSubjectDid(address),\n    [accountVCBuilder, address],\n  );\n  const myDid = useMemo(\n    () => accountVCBuilder.getSubjectDid(connectedAddress),\n    [accountVCBuilder, connectedAddress],\n  );\n  const endorsements = useSelector(\n    getTechnicalEndorsementsForAccountId(pkhAddress),\n  );\n\n  const hasEndorsement = endorsements?.some(\n    (endorsementType) => endorsementType.endorsements.length > 0,\n  );\n\n  const isMyAccount = address === connectedAddress;\n\n  return (\n    <>\n      <Divider mt=\"3rem\" mb=\"2rem\" />\n      <HStack\n        mb={4}\n        width={'100%'}\n        justifyContent={'space-between'}\n        alignContent={'center'}\n      >\n        <Heading as=\"h2\" fontSize=\"2xl\">\n          {t`Technical Expertise`}\n        </Heading>\n        {connectedAddress && !isMyAccount && (\n          <AccountTEEndorsement\n            address={address}\n            connectedAddress={connectedAddress}\n          />\n        )}\n      </HStack>\n      {hasEndorsement && (\n        <Box data-testid=\"activity-section\">\n          {endorsements?.map((endorsementType, index) => (\n            <TechnicalExpertiseItem\n              key={`${endorsementType.type}-${index}`}\n              endorsements={endorsementType.endorsements}\n              type={endorsementType.type}\n              myDid={myDid}\n            />\n          ))}\n        </Box>\n      )}\n    </>\n  );\n};\n","import { Box, Container, HStack, VStack } from '@chakra-ui/react';\nimport { t } from '@lingui/macro';\nimport Jazzicon from '@metamask/jazzicon';\nimport type { Hex } from '@metamask/utils';\nimport { graphql, withPrefix } from 'gatsby';\nimport { type FunctionComponent, useEffect } from 'react';\nimport { useAccount } from 'wagmi';\n\nimport banner from '../../assets/images/seo/home.png';\nimport {\n  AccountInfo,\n  AccountReport,\n  DevelopedSnapsSection,\n} from '../../features/account';\nimport {\n  fetchAccountAssertionsForAccountId,\n  fetchAssertionsByIssuer,\n} from '../../features/account/assertions/api';\nimport { ActivitySection } from '../../features/account/components/activity/ActivitySection';\nimport { TechnicalExpertiseSection } from '../../features/account/components/technical-expertise/TechnicalExpertiseSection';\nimport { fetchTrustScoreForAccountId } from '../../features/account/trust-score/api';\nimport { useDispatch, useVerifiableCredential } from '../../hooks';\nimport { type Fields, parseAddress } from '../../utils';\nimport NotFound from '../404';\n\ntype AccountPageProps = {\n  location: {\n    search: Record<string, string> | URLSearchParams | undefined;\n  };\n};\n\nconst AccountPage: FunctionComponent<AccountPageProps> = ({ location }) => {\n  const { address: connectedAddress, isConnected } = useAccount();\n  const params = new URLSearchParams(location.search);\n  const address = parseAddress(params.get('address') as Hex);\n  const { accountVCBuilder } = useVerifiableCredential();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (address) {\n      const issuer = accountVCBuilder.getIssuerDid(address);\n      dispatch(fetchAccountAssertionsForAccountId(issuer)).catch((error) =>\n        console.log(error),\n      );\n      dispatch(fetchTrustScoreForAccountId(issuer)).catch((error) =>\n        console.log(error),\n      );\n      dispatch(fetchAssertionsByIssuer(issuer)).catch((error) =>\n        console.log(error),\n      );\n    }\n  }, [dispatch, accountVCBuilder, address]);\n\n  const isMyAccount = address === connectedAddress;\n  if (!address) {\n    return <NotFound />;\n  }\n\n  const addr = address.trim().slice(2, 10);\n  const seed = parseInt(addr, 16);\n\n  const jazziconElement = Jazzicon(10, seed);\n  const colorRects = jazziconElement.querySelectorAll('rect');\n  const colorList: string[] = [];\n  colorRects.forEach((rect) => {\n    colorList.push(rect.getAttribute('fill')?.toString() as string);\n  });\n  const gradientBackground = `linear-gradient(to right, ${colorList[0]}, ${colorList[1]}, ${colorList[2]})`;\n\n  return (\n    <>\n      <Box\n        data-testid=\"background\"\n        sx={{\n          position: 'fixed',\n          width: '100%',\n          height: '100%',\n          zIndex: -1,\n          background: gradientBackground,\n          filter: 'blur(96px) saturate(1.2)',\n          opacity: '0.10',\n        }}\n      />\n      <Box position=\"relative\" data-testid=\"account-info\" mt=\"4rem\">\n        <Container maxWidth=\"container.xl\" paddingTop=\"0\" position=\"relative\">\n          <VStack spacing=\"8\">\n            <AccountInfo address={address} />\n            <HStack>\n              {isConnected && !isMyAccount && (\n                <AccountReport\n                  address={address}\n                  connectedAddress={connectedAddress as Hex}\n                />\n              )}\n            </HStack>\n          </VStack>\n          <DevelopedSnapsSection author={address} />\n          <TechnicalExpertiseSection\n            address={address}\n            connectedAddress={connectedAddress}\n          />\n          <ActivitySection address={address} />\n        </Container>\n      </Box>\n    </>\n  );\n};\n\ntype HeadProps = {\n  data: {\n    site: {\n      siteMetadata: Fields<\n        Queries.SiteSiteMetadata,\n        'title' | 'description' | 'author' | 'siteUrl'\n      >;\n    };\n  };\n};\n\nexport const Head: FunctionComponent<HeadProps> = ({ data }) => {\n  const name = t`Account Profile`;\n  const title = t`MetaMask Snaps Directory - Account Profile`;\n  const description = t`Discover the MetaMask Snaps Directory Account Profile page.`;\n\n  const image = `${data.site.siteMetadata.siteUrl}${withPrefix(banner)}`;\n\n  return (\n    <>\n      <html lang=\"en\" />\n      <title>{title}</title>\n      <meta name=\"description\" content={description} />\n      <meta property=\"og:title\" content={name} />\n      <meta property=\"og:site_name\" content={data.site.siteMetadata.title} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"og:image\" content={image} />\n      <meta name=\"og:image:width\" content=\"1200\" />\n      <meta name=\"og:image:height\" content=\"630\" />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:creator\" content={data.site.siteMetadata.author} />\n      <meta name=\"twitter:title\" content={name} />\n      <meta name=\"twitter:description\" content={description} />\n      <meta name=\"twitter:image\" content={image} />\n    </>\n  );\n};\n\nexport const query = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n        siteUrl\n      }\n    }\n  }\n`;\n\nexport default AccountPage;\n","export default __webpack_public_path__ + \"static/home-3da7273f125d0f7c0add3b849d33e152.png\";"],"names":["Head","_ref","data","title","site","siteMetadata","image","siteUrl","withPrefix","banner","_jsxs","_Fragment","children","_jsx","lang","name","content","description","property","author","NotFoundPage","Container","display","flexDirection","marginY","alignItems","textAlign","maxWidth","Fox","Heading","as","fontSize","lineHeight","Trans","id","Link","to","Button","variant","DevelopedSnapsSection","snaps","useSelector","getSnapsByFilter","length","Divider","mt","mb","i18n","_","Box","SimpleGrid","columns","spacing","marginX","map","snap","index","SnapCard","Circle","props","jsx","circle","cx","cy","r","fill","displayName","spin","strokeDasharray","strokeDashoffset","rotate","transform","left","from","backgroundPosition","Shape","size","isIndeterminate","rest","svg","viewBox","__css","width","height","animation","CircularProgress","ref","_a","max","min","valueText","getValueText","value","capIsRound","thickness","color","trackColor","progress","options","role","percent","valueToPercent","bind","getAriaValueText","getProgressProps","determinant","indicatorProps","css","transitionProperty","transitionDuration","transitionTimingFunction","rootStyles","position","verticalAlign","jsxs","div","className","stroke","strokeWidth","strokeLinecap","opacity","getConnectedNodesForLevel","accountAssertions","accountId","level","ignoreAccountIds","accountConnections","nodes","links","push","group","isMain","topTwoConnections","filter","assertion","includes","issuer","toLowerCase","slice","forEach","connection","source","target","_ignoreAccountIds","connectedNodeLevel","apply","_toConsumableArray","node","_accountConnections$l","_accountConnections$n","issuerConnections","AccountInfo","address","isLoading","useEnsName","chainId","mainnet","isConnected","useAccount","accountVCBuilder","useVerifiableCredential","getSubjectDid","trustScores","getAccountTrustScoreForAccountId","connectedNodes","createSelector","state","getAccountConnectedNodes","VStack","ConnectedNodes","AccountRoleTags","HStack","trimAddress","MoreOptionMenu","subjectAddress","AccountReportModal","reportEntity","onSign","onClose","visibility","setIsLoading","useState","selectedOptions","setSelectedOptions","RequestSignModal","isOpen","mode","headerIcon","QuestionRedIcon","buttonText","onSignButtonClick","finally","Center","Text","fontWeight","noOfLines","values","components","MultipleCheckboxOptions","onChange","TEEndorsementModal","trustEntity","checkedItems","setCheckedItems","AvatarBlueIcon","args","_options$index","option","background","padding","borderRadius","Checkbox","marginInline","event","handleCheckboxChange","checked","label","AccountReport","connectedAddress","signMessage","signError","trimmedAddress","useMemo","pkhAddress","latestTrustworthinessLevel","getCurrentTrustworthinessLevelForIssuer","isAccountReported","isAccountReportedByIssuer","showModal","setShowModal","reported","setEndorsed","useEffect","dispatch","useDispatch","showSuccessMsg","showErrorMsg","useToastMsg","useSignErrorHandler","ReportButton","onClick","isDisabled","undefined","async","VC","buildReportAccountTrust","selected","signature","getSignedAssertion","createAccountAssertion","then","action","type","endsWith","fetchAccountAssertionsForAccountId","catch","error","console","log","AccountTEEndorsement","isAccountEndorsed","isAccountEndorsedByIssuer","endorsed","TrustworthinessScope","SoftwareDevelopment","SoftwareSecurity","EndorseButton","buildTechnicalExpertiseTrust","Set","scope","has","fillOptions","chain","useNetwork","copyToClipboard","useCallback","navigator","clipboard","writeText","window","location","origin","openBlockExplorer","_chain$blockExplorers","_chain$blockExplorers2","open","blockExplorers","etherscan","url","IconMenu","icon","MoreOptionIcon","MenuItemCard","ShareIcon","testId","ExportOutlineIcon","ActivityItem","isSnap","startsWith","_assertion$trustworth","_assertion$trustworth2","_assertion$statusReas","_assertion$statusReas2","statusReason","style","StarFilledIcon","mr","WarningIcon","trustworthiness","QuestionIcon","reason","reasons","_assertion$statusReas3","_assertion$trustworth3","lastItem","pop","lastItemLink","join","justifyContent","EntityName","subject","alignContent","formatDistanceToNow","issuanceDate","addSuffix","ActivitySection","assertions","getIssuedAssertionsForIssuerId","TechnicalExpertiseItem","endorsements","myDid","isEndorsedByMe","find","endorsement","endorsementsCount","maxEndorsementsToDisplay","Math","maxEndorsements","ml","TechnicalExpertiseSection","getTechnicalEndorsementsForAccountId","hasEndorsement","some","endorsementType","isMyAccount","_ref2","params","URLSearchParams","search","parseAddress","get","getIssuerDid","fetchTrustScoreForAccountId","fetchAssertionsByIssuer","NotFound","addr","trim","seed","parseInt","colorRects","Jazzicon","querySelectorAll","colorList","rect","_rect$getAttribute","getAttribute","toString","gradientBackground","sx","zIndex","paddingTop"],"sourceRoot":""}