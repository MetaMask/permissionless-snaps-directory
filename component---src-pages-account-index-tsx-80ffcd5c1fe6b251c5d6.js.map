{"version":3,"file":"component---src-pages-account-index-tsx-80ffcd5c1fe6b251c5d6.js","mappings":"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","sources":["webpack://@metamask/snaps-directory/./src/pages/404.tsx","webpack://@metamask/snaps-directory/./src/features/account/assertions/enums.ts","webpack://@metamask/snaps-directory/./src/features/account/components/activity/ActivityItem.tsx","webpack://@metamask/snaps-directory/./src/features/account/components/activity/ActivitySection.tsx","webpack://@metamask/snaps-directory/./src/features/account/components/technical-expertise/TechnicalExpertiseItem.tsx","webpack://@metamask/snaps-directory/./src/features/account/components/technical-expertise/TechnicalExpertiseSection.tsx","webpack://@metamask/snaps-directory/./src/pages/account/index.tsx","webpack://@metamask/snaps-directory/./src/assets/images/seo/home.png"],"sourcesContent":["import { Container, Heading, Button } from '@chakra-ui/react';\nimport { Trans } from '@lingui/macro';\nimport { graphql, Link, withPrefix } from 'gatsby';\nimport type { FunctionComponent } from 'react';\n\nimport banner from '../assets/images/seo/home.png';\nimport { Fox } from '../components';\nimport type { Fields } from '../utils';\n\nconst NotFoundPage: FunctionComponent = () => (\n  <Container\n    display=\"flex\"\n    flexDirection=\"column\"\n    marginY=\"12\"\n    alignItems=\"center\"\n    textAlign=\"center\"\n    maxWidth=\"container.md\"\n  >\n    <Fox />\n    <Heading\n      as=\"h1\"\n      fontSize={['2xl', '4xl', '5xl']}\n      marginY=\"6\"\n      lineHeight=\"116%\"\n    >\n      <Trans>The page you&apos;re looking for can&apos;t be found.</Trans>\n    </Heading>\n    <Link to=\"/\">\n      <Button variant=\"primary\">\n        <Trans>Go home</Trans>\n      </Button>\n    </Link>\n  </Container>\n);\n\ntype HeadProps = {\n  data: {\n    site: {\n      siteMetadata: Fields<\n        Queries.SiteSiteMetadata,\n        'title' | 'description' | 'author' | 'siteUrl'\n      >;\n    };\n  };\n};\n\nexport const Head: FunctionComponent<HeadProps> = ({ data }) => {\n  const title = `Page not found - ${data.site.siteMetadata.title}`;\n  const image = `${data.site.siteMetadata.siteUrl}${withPrefix(banner)}`;\n\n  return (\n    <>\n      <html lang=\"en\" />\n      <title>{title}</title>\n      <meta name=\"description\" content={data.site.siteMetadata.description} />\n      <meta property=\"og:title\" content=\"Page not found\" />\n      <meta property=\"og:site_name\" content={data.site.siteMetadata.title} />\n      <meta\n        property=\"og:description\"\n        content={data.site.siteMetadata.description}\n      />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"og:image\" content={image} />\n      <meta name=\"og:image:width\" content=\"1200\" />\n      <meta name=\"og:image:height\" content=\"630\" />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:creator\" content={data.site.siteMetadata.author} />\n      <meta name=\"twitter:title\" content={title} />\n      <meta\n        name=\"twitter:description\"\n        content={data.site.siteMetadata.description}\n      />\n      <meta name=\"twitter:image\" content={image} />\n    </>\n  );\n};\n\nexport const query = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n        siteUrl\n      }\n    }\n  }\n`;\n\nexport default NotFoundPage;\n","export enum SubjectType {\n  Snap = 'Snap',\n  User = 'User',\n}\n\nexport enum Value {\n  Dispute = 'Dispute',\n  Endorsement = 'Endorsement',\n}\n","import { Box, HStack, Text } from '@chakra-ui/react';\nimport { t } from '@lingui/macro';\nimport { formatDistanceToNow } from 'date-fns';\nimport type { FunctionComponent } from 'react';\nimport { useCallback, useMemo } from 'react';\n\nimport {\n  QuestionIcon,\n  StarFilledIcon,\n  WarningIcon,\n} from '../../../../components';\nimport { EntityName } from '../../../../components/EntityName';\nimport { SubjectType, Value } from '../../assertions/enums';\nimport type { AccountAssertionState } from '../../assertions/store';\n\nexport type ActivityItemProps = {\n  assertion: AccountAssertionState;\n};\n\nexport const ActivityItem: FunctionComponent<ActivityItemProps> = ({\n  assertion,\n}) => {\n  const isSnap = useMemo(\n    () => assertion.subjectType === SubjectType.Snap,\n    [assertion.subjectType],\n  );\n\n  const type = useCallback(() => {\n    if (isSnap) {\n      if (assertion.value === Value.Endorsement) {\n        return (\n          <span style={{ display: 'flex', alignItems: 'center' }}>\n            <StarFilledIcon width=\"20px\" fill=\"icon.muted\" mr={2} />\n            {t`Endorsed`}\n          </span>\n        );\n      } else if (assertion.value === Value.Dispute) {\n        return (\n          <span style={{ display: 'flex', alignItems: 'center' }}>\n            <WarningIcon width=\"20px\" fill=\"icon.muted\" mr={2} />\n            {t`Reported`}\n          </span>\n        );\n      }\n    } else if (assertion.value === Value.Endorsement) {\n      return (\n        <span style={{ display: 'flex', alignItems: 'center' }}>\n          <StarFilledIcon width=\"20px\" fill=\"icon.muted\" mr={2} />\n          {t`Endorsed`}\n        </span>\n      );\n    } else if (assertion.value === Value.Dispute) {\n      return (\n        <span style={{ display: 'flex', alignItems: 'center' }}>\n          <WarningIcon width=\"20px\" fill=\"icon.muted\" mr={2} />\n          {t`Reported`}\n        </span>\n      );\n    }\n\n    return (\n      <span style={{ display: 'flex', alignItems: 'center' }}>\n        <QuestionIcon width=\"20px\" fill=\"icon.muted\" mr={2} />\n        {t`Unknown activity`}\n      </span>\n    );\n  }, [isSnap, assertion]);\n\n  const reason = useCallback(() => {\n    const reasons = [...assertion.reasons];\n\n    if (!reasons || reasons.length === 0) {\n      return '';\n    } else if (reasons.length === 1) {\n      return `for ${reasons[0]}`;\n    }\n\n    const lastItem = reasons.pop();\n    const lastItemLink = t`and`;\n\n    return `for ${reasons.join(', ')} ${lastItemLink} ${lastItem}`;\n  }, [assertion]);\n\n  return (\n    <HStack mb={4} width={'100%'} justifyContent={'space-between'}>\n      <HStack>\n        <Text>{type()}</Text>\n        <EntityName\n          subject={assertion.subjectId}\n          isSnap={assertion.subjectType === SubjectType.Snap}\n        />\n        <Text>{reason()}</Text>\n      </HStack>\n      <Box alignContent={'flex-end'}>\n        <Text color={'icon.muted'}>\n          {formatDistanceToNow(assertion.issuanceDate, { addSuffix: true })}\n        </Text>\n      </Box>\n    </HStack>\n  );\n};\n","import { Box, Divider, Heading } from '@chakra-ui/react';\nimport { t } from '@lingui/macro';\nimport type { Address } from '@wagmi/core';\nimport type { FunctionComponent } from 'react';\n\nimport { ActivityItem } from './ActivityItem';\nimport { useSelector } from '../../../../hooks';\nimport { getIssuedAssertionsForIssuerId } from '../../assertions/store';\n\nexport type ActivitySectionProps = {\n  address: Address;\n};\n\nexport const ActivitySection: FunctionComponent<ActivitySectionProps> = ({\n  address,\n}) => {\n  const assertions = useSelector(getIssuedAssertionsForIssuerId(address));\n\n  if (assertions && assertions.length !== 0) {\n    return (\n      <>\n        <Divider mt=\"3rem\" mb=\"2rem\" />\n        <Heading as=\"h2\" fontSize=\"2xl\" mb=\"2rem\">\n          {t`Activity`}\n        </Heading>\n        <Box data-testid=\"activity-section\">\n          {assertions.map((assertion, index) => (\n            <ActivityItem\n              key={`${assertion.subjectId}-${index}`}\n              assertion={assertion}\n            />\n          ))}\n        </Box>\n      </>\n    );\n  }\n\n  return null;\n};\n","import { HStack, Text, VStack } from '@chakra-ui/react';\nimport { t } from '@lingui/macro';\nimport type { Address } from '@wagmi/core';\nimport type { FunctionComponent } from 'react';\n\nimport { EntityName } from '../../../../components/EntityName';\nimport type { AccountAssertionState } from '../../assertions/store';\nimport type { TrustworthinessScope } from '../../assertions/types';\n\nexport type TechnicalExpertiseItemProps = {\n  endorsements: AccountAssertionState[];\n  type: TrustworthinessScope;\n  myAddress: Address | undefined;\n};\n\nexport const TechnicalExpertiseItem: FunctionComponent<\n  TechnicalExpertiseItemProps\n> = ({ endorsements, type, myAddress }) => {\n  const isEndorsedByMe = endorsements.find(\n    (endorsement) =>\n      endorsement.issuerId.toLowerCase() === myAddress?.toLowerCase(),\n  );\n\n  const endorsementsCount = endorsements.length;\n  const maxEndorsementsToDisplay = Math.min(3, endorsementsCount);\n  const maxEndorsements = isEndorsedByMe\n    ? maxEndorsementsToDisplay - 1\n    : maxEndorsementsToDisplay;\n\n  return (\n    <VStack mb={2} alignItems={'start'}>\n      <Text fontWeight={'medium'}>{type}</Text>\n      <HStack>\n        <Text>{t`Endorsed by`}</Text>\n        {isEndorsedByMe && myAddress && (\n          <>\n            <EntityName\n              key={`${myAddress}-${type}`}\n              subject={myAddress.toLowerCase()}\n              isSnap={false}\n              title={`${t`you`}`}\n            />\n            {endorsementsCount > 1 && <Text ml={-1}>,</Text>}\n          </>\n        )}\n        {endorsements.slice(0, maxEndorsements).map((endorsement, index) => (\n          <>\n            <EntityName\n              key={`${endorsement.issuerId}-${index}`}\n              subject={endorsement.issuerId}\n              isSnap={false}\n            />\n            {index < maxEndorsements - 1 && <Text ml={-1}>,</Text>}\n          </>\n        ))}\n        {endorsementsCount > maxEndorsements + 1 && (\n          <Text ml={0}>{`+ ${\n            endorsementsCount - maxEndorsementsToDisplay\n          } ${t`more`}`}</Text>\n        )}\n      </HStack>\n    </VStack>\n  );\n};\n","import { Box, Divider, Heading, HStack } from '@chakra-ui/react';\nimport { t } from '@lingui/macro';\nimport type { Address } from '@wagmi/core';\nimport type { FunctionComponent } from 'react';\n\nimport { TechnicalExpertiseItem } from './TechnicalExpertiseItem';\nimport { useSelector } from '../../../../hooks';\nimport { AccountTEEndorsement } from '../../AccountTEEndorsement';\nimport { getTechnicalEndorsementsForAccountId } from '../../assertions/store';\n\nexport type TechnicalExpertiseSectionProps = {\n  address: Address;\n  connectedAddress: Address | undefined;\n};\n\nexport const TechnicalExpertiseSection: FunctionComponent<\n  TechnicalExpertiseSectionProps\n> = ({ address, connectedAddress }) => {\n  const endorsements = useSelector(\n    getTechnicalEndorsementsForAccountId(address),\n  );\n\n  const hasEndorsement = endorsements?.some(\n    (endorsementType) => endorsementType.endorsements.length > 0,\n  );\n\n  const isMyAccount = address === connectedAddress;\n\n  return (\n    <>\n      <Divider mt=\"3rem\" mb=\"2rem\" />\n      <HStack\n        mb={4}\n        width={'100%'}\n        justifyContent={'space-between'}\n        alignContent={'center'}\n      >\n        <Heading as=\"h2\" fontSize=\"2xl\">\n          {t`Technical Expertise`}\n        </Heading>\n        {connectedAddress && !isMyAccount && (\n          <AccountTEEndorsement\n            address={address}\n            connectedAddress={connectedAddress}\n          />\n        )}\n      </HStack>\n      {hasEndorsement && (\n        <Box data-testid=\"activity-section\">\n          {endorsements?.map((endorsementType, index) => (\n            <TechnicalExpertiseItem\n              key={`${endorsementType.type}-${index}`}\n              endorsements={endorsementType.endorsements}\n              type={endorsementType.type}\n              myAddress={connectedAddress}\n            />\n          ))}\n        </Box>\n      )}\n    </>\n  );\n};\n","import { Box, Container, HStack, VStack } from '@chakra-ui/react';\nimport { t } from '@lingui/macro';\nimport Jazzicon from '@metamask/jazzicon';\nimport type { Hex } from '@metamask/utils';\nimport { graphql, withPrefix } from 'gatsby';\nimport { type FunctionComponent, useEffect } from 'react';\nimport { useAccount } from 'wagmi';\n\nimport banner from '../../assets/images/seo/home.png';\nimport {\n  AccountInfo,\n  AccountReport,\n  DevelopedSnapsSection,\n} from '../../features/account';\nimport {\n  fetchAccountAssertionsForAccountId,\n  fetchAssertionsByIssuer,\n} from '../../features/account/assertions/api';\nimport { ActivitySection } from '../../features/account/components/activity/ActivitySection';\nimport { TechnicalExpertiseSection } from '../../features/account/components/technical-expertise/TechnicalExpertiseSection';\nimport { fetchTrustScoreForAccountId } from '../../features/account/trust-score/api';\nimport { useDispatch, useVerifiableCredential } from '../../hooks';\nimport { type Fields, parseAddress } from '../../utils';\nimport NotFound from '../404';\n\ntype AccountPageProps = {\n  location: {\n    search: Record<string, string> | URLSearchParams | undefined;\n  };\n};\n\nconst AccountPage: FunctionComponent<AccountPageProps> = ({ location }) => {\n  const { address: connectedAddress, isConnected } = useAccount();\n  const params = new URLSearchParams(location.search);\n  const address = parseAddress(params.get('address') as Hex);\n  const { accountVCBuilder } = useVerifiableCredential();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (address) {\n      dispatch(fetchAccountAssertionsForAccountId(address)).catch((error) =>\n        console.log(error),\n      );\n      dispatch(fetchTrustScoreForAccountId(address)).catch((error) =>\n        console.log(error),\n      );\n      dispatch(fetchAssertionsByIssuer(address)).catch((error) =>\n        console.log(error),\n      );\n    }\n  }, [dispatch, accountVCBuilder, address]);\n\n  const isMyAccount = address === connectedAddress;\n  if (!address) {\n    return <NotFound />;\n  }\n\n  const addr = address.trim().slice(2, 10);\n  const seed = parseInt(addr, 16);\n\n  const jazziconElement = Jazzicon(10, seed);\n  const colorRects = jazziconElement.querySelectorAll('rect');\n  const colorList: string[] = [];\n  colorRects.forEach((rect) => {\n    colorList.push(rect.getAttribute('fill')?.toString() as string);\n  });\n  const gradientBackground = `linear-gradient(to right, ${colorList[0]}, ${colorList[1]}, ${colorList[2]})`;\n\n  return (\n    <>\n      <Box\n        data-testid=\"background\"\n        sx={{\n          position: 'fixed',\n          width: '100%',\n          height: '100%',\n          zIndex: -1,\n          background: gradientBackground,\n          filter: 'blur(96px) saturate(1.2)',\n          opacity: '0.10',\n        }}\n      />\n      <Box position=\"relative\" data-testid=\"account-info\" mt=\"4rem\">\n        <Container maxWidth=\"container.xl\" paddingTop=\"0\" position=\"relative\">\n          <VStack spacing=\"8\">\n            <AccountInfo address={address} />\n            <HStack>\n              {isConnected && !isMyAccount && (\n                <AccountReport\n                  address={address}\n                  connectedAddress={connectedAddress as Hex}\n                />\n              )}\n            </HStack>\n          </VStack>\n          <DevelopedSnapsSection author={address} />\n          <TechnicalExpertiseSection\n            address={address}\n            connectedAddress={connectedAddress}\n          />\n          <ActivitySection address={address} />\n        </Container>\n      </Box>\n    </>\n  );\n};\n\ntype HeadProps = {\n  data: {\n    site: {\n      siteMetadata: Fields<\n        Queries.SiteSiteMetadata,\n        'title' | 'description' | 'author' | 'siteUrl'\n      >;\n    };\n  };\n};\n\nexport const Head: FunctionComponent<HeadProps> = ({ data }) => {\n  const name = t`Account Profile`;\n  const title = t`MetaMask Snaps Directory - Account Profile`;\n  const description = t`Discover the MetaMask Snaps Directory Account Profile page.`;\n\n  const image = `${data.site.siteMetadata.siteUrl}${withPrefix(banner)}`;\n\n  return (\n    <>\n      <html lang=\"en\" />\n      <title>{title}</title>\n      <meta name=\"description\" content={description} />\n      <meta property=\"og:title\" content={name} />\n      <meta property=\"og:site_name\" content={data.site.siteMetadata.title} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"og:image\" content={image} />\n      <meta name=\"og:image:width\" content=\"1200\" />\n      <meta name=\"og:image:height\" content=\"630\" />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:creator\" content={data.site.siteMetadata.author} />\n      <meta name=\"twitter:title\" content={name} />\n      <meta name=\"twitter:description\" content={description} />\n      <meta name=\"twitter:image\" content={image} />\n    </>\n  );\n};\n\nexport const query = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n        siteUrl\n      }\n    }\n  }\n`;\n\nexport default AccountPage;\n","export default __webpack_public_path__ + \"static/home-3da7273f125d0f7c0add3b849d33e152.png\";"],"names":["Head","_ref","data","title","site","siteMetadata","image","siteUrl","withPrefix","banner","_jsxs","_Fragment","children","_jsx","lang","name","content","description","property","author","NotFoundPage","Container","display","flexDirection","marginY","alignItems","textAlign","maxWidth","Fox","Heading","as","fontSize","lineHeight","Trans","id","Link","to","Button","variant","SubjectType","Value","ActivityItem","assertion","isSnap","useMemo","subjectType","Snap","type","useCallback","value","Endorsement","style","StarFilledIcon","width","fill","mr","i18n","_","Dispute","WarningIcon","QuestionIcon","reason","reasons","_toConsumableArray","length","lastItem","pop","lastItemLink","join","HStack","mb","justifyContent","Text","EntityName","subject","subjectId","Box","alignContent","color","formatDistanceToNow","issuanceDate","addSuffix","ActivitySection","address","assertions","useSelector","getIssuedAssertionsForIssuerId","Divider","mt","map","index","TechnicalExpertiseItem","endorsements","myAddress","isEndorsedByMe","find","endorsement","issuerId","toLowerCase","endorsementsCount","maxEndorsementsToDisplay","Math","min","maxEndorsements","VStack","fontWeight","ml","slice","TechnicalExpertiseSection","connectedAddress","getTechnicalEndorsementsForAccountId","hasEndorsement","some","endorsementType","isMyAccount","AccountTEEndorsement","_ref2","location","isConnected","useAccount","params","URLSearchParams","search","parseAddress","get","accountVCBuilder","useVerifiableCredential","dispatch","useDispatch","useEffect","fetchAccountAssertionsForAccountId","catch","error","console","log","fetchTrustScoreForAccountId","fetchAssertionsByIssuer","NotFound","addr","trim","seed","parseInt","colorRects","Jazzicon","querySelectorAll","colorList","forEach","rect","_rect$getAttribute","push","getAttribute","toString","gradientBackground","sx","position","height","zIndex","background","filter","opacity","paddingTop","spacing","AccountInfo","AccountReport","DevelopedSnapsSection"],"sourceRoot":""}